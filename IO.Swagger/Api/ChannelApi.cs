/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getAllChannels channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelStoredChannelResponseCollection</returns>
        ChannelStoredChannelResponseCollection ChannelGetAllChannels (string authorization);

        /// <summary>
        /// getAllChannels channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelStoredChannelResponseCollection</returns>
        ApiResponse<ChannelStoredChannelResponseCollection> ChannelGetAllChannelsWithHttpInfo (string authorization);
        /// <summary>
        /// getChannelById channel
        /// </summary>
        /// <remarks>
        /// Returns information about the specified channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelGetChannelByIDResponseBody</returns>
        ChannelGetChannelByIDResponseBody ChannelGetChannelById (int? channelId, string authorization);

        /// <summary>
        /// getChannelById channel
        /// </summary>
        /// <remarks>
        /// Returns information about the specified channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelGetChannelByIDResponseBody</returns>
        ApiResponse<ChannelGetChannelByIDResponseBody> ChannelGetChannelByIdWithHttpInfo (int? channelId, string authorization);
        /// <summary>
        /// getChannelsByDevice channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels of a specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelStoredChannelResponseCollection</returns>
        ChannelStoredChannelResponseCollection ChannelGetChannelsByDevice (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getChannelsByDevice channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels of a specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelStoredChannelResponseCollection</returns>
        ApiResponse<ChannelStoredChannelResponseCollection> ChannelGetChannelsByDeviceWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getAllChannels channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelStoredChannelResponseCollection</returns>
        System.Threading.Tasks.Task<ChannelStoredChannelResponseCollection> ChannelGetAllChannelsAsync (string authorization);

        /// <summary>
        /// getAllChannels channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelStoredChannelResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStoredChannelResponseCollection>> ChannelGetAllChannelsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getChannelById channel
        /// </summary>
        /// <remarks>
        /// Returns information about the specified channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelGetChannelByIDResponseBody</returns>
        System.Threading.Tasks.Task<ChannelGetChannelByIDResponseBody> ChannelGetChannelByIdAsync (int? channelId, string authorization);

        /// <summary>
        /// getChannelById channel
        /// </summary>
        /// <remarks>
        /// Returns information about the specified channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelGetChannelByIDResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelGetChannelByIDResponseBody>> ChannelGetChannelByIdAsyncWithHttpInfo (int? channelId, string authorization);
        /// <summary>
        /// getChannelsByDevice channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels of a specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelStoredChannelResponseCollection</returns>
        System.Threading.Tasks.Task<ChannelStoredChannelResponseCollection> ChannelGetChannelsByDeviceAsync (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getChannelsByDevice channel
        /// </summary>
        /// <remarks>
        /// Returns information about all channels of a specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelStoredChannelResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStoredChannelResponseCollection>> ChannelGetChannelsByDeviceAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelApi : IChannelApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getAllChannels channel Returns information about all channels to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelStoredChannelResponseCollection</returns>
        public ChannelStoredChannelResponseCollection ChannelGetAllChannels (string authorization)
        {
             ApiResponse<ChannelStoredChannelResponseCollection> localVarResponse = ChannelGetAllChannelsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllChannels channel Returns information about all channels to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelStoredChannelResponseCollection</returns>
        public ApiResponse< ChannelStoredChannelResponseCollection > ChannelGetAllChannelsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetAllChannels");

            var localVarPath = "/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetAllChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStoredChannelResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStoredChannelResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStoredChannelResponseCollection)));
        }

        /// <summary>
        /// getAllChannels channel Returns information about all channels to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelStoredChannelResponseCollection</returns>
        public async System.Threading.Tasks.Task<ChannelStoredChannelResponseCollection> ChannelGetAllChannelsAsync (string authorization)
        {
             ApiResponse<ChannelStoredChannelResponseCollection> localVarResponse = await ChannelGetAllChannelsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllChannels channel Returns information about all channels to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelStoredChannelResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelStoredChannelResponseCollection>> ChannelGetAllChannelsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetAllChannels");

            var localVarPath = "/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetAllChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStoredChannelResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStoredChannelResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStoredChannelResponseCollection)));
        }

        /// <summary>
        /// getChannelById channel Returns information about the specified channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelGetChannelByIDResponseBody</returns>
        public ChannelGetChannelByIDResponseBody ChannelGetChannelById (int? channelId, string authorization)
        {
             ApiResponse<ChannelGetChannelByIDResponseBody> localVarResponse = ChannelGetChannelByIdWithHttpInfo(channelId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getChannelById channel Returns information about the specified channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelGetChannelByIDResponseBody</returns>
        public ApiResponse< ChannelGetChannelByIDResponseBody > ChannelGetChannelByIdWithHttpInfo (int? channelId, string authorization)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelApi->ChannelGetChannelById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetChannelById");

            var localVarPath = "/channel/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetChannelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetChannelByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetChannelByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetChannelByIDResponseBody)));
        }

        /// <summary>
        /// getChannelById channel Returns information about the specified channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelGetChannelByIDResponseBody</returns>
        public async System.Threading.Tasks.Task<ChannelGetChannelByIDResponseBody> ChannelGetChannelByIdAsync (int? channelId, string authorization)
        {
             ApiResponse<ChannelGetChannelByIDResponseBody> localVarResponse = await ChannelGetChannelByIdAsyncWithHttpInfo(channelId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getChannelById channel Returns information about the specified channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">ID of the channel whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelGetChannelByIDResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelGetChannelByIDResponseBody>> ChannelGetChannelByIdAsyncWithHttpInfo (int? channelId, string authorization)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelApi->ChannelGetChannelById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetChannelById");

            var localVarPath = "/channel/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetChannelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetChannelByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetChannelByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetChannelByIDResponseBody)));
        }

        /// <summary>
        /// getChannelsByDevice channel Returns information about all channels of a specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ChannelStoredChannelResponseCollection</returns>
        public ChannelStoredChannelResponseCollection ChannelGetChannelsByDevice (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<ChannelStoredChannelResponseCollection> localVarResponse = ChannelGetChannelsByDeviceWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getChannelsByDevice channel Returns information about all channels of a specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of ChannelStoredChannelResponseCollection</returns>
        public ApiResponse< ChannelStoredChannelResponseCollection > ChannelGetChannelsByDeviceWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling ChannelApi->ChannelGetChannelsByDevice");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetChannelsByDevice");

            var localVarPath = "/device/{DeviceChildIdDefunct}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetChannelsByDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStoredChannelResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStoredChannelResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStoredChannelResponseCollection)));
        }

        /// <summary>
        /// getChannelsByDevice channel Returns information about all channels of a specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ChannelStoredChannelResponseCollection</returns>
        public async System.Threading.Tasks.Task<ChannelStoredChannelResponseCollection> ChannelGetChannelsByDeviceAsync (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<ChannelStoredChannelResponseCollection> localVarResponse = await ChannelGetChannelsByDeviceAsyncWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getChannelsByDevice channel Returns information about all channels of a specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose channels should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (ChannelStoredChannelResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelStoredChannelResponseCollection>> ChannelGetChannelsByDeviceAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling ChannelApi->ChannelGetChannelsByDevice");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ChannelApi->ChannelGetChannelsByDevice");

            var localVarPath = "/device/{DeviceChildIdDefunct}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelGetChannelsByDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStoredChannelResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStoredChannelResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStoredChannelResponseCollection)));
        }

    }
}
