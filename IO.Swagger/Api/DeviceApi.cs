/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getAllDevices device
        /// </summary>
        /// <remarks>
        /// Returns information about all devices to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceStoredDeviceResponseCollection</returns>
        DeviceStoredDeviceResponseCollection DeviceGetAllDevices (string authorization);

        /// <summary>
        /// getAllDevices device
        /// </summary>
        /// <remarks>
        /// Returns information about all devices to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceStoredDeviceResponseCollection</returns>
        ApiResponse<DeviceStoredDeviceResponseCollection> DeviceGetAllDevicesWithHttpInfo (string authorization);
        /// <summary>
        /// getDeviceById device
        /// </summary>
        /// <remarks>
        /// Returns information about the specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceGetDeviceByIDResponseBody</returns>
        DeviceGetDeviceByIDResponseBody DeviceGetDeviceById (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getDeviceById device
        /// </summary>
        /// <remarks>
        /// Returns information about the specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceGetDeviceByIDResponseBody</returns>
        ApiResponse<DeviceGetDeviceByIDResponseBody> DeviceGetDeviceByIdWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        /// <summary>
        /// getDeviceBySerialNumber device
        /// </summary>
        /// <remarks>
        /// Returns information about the device corresponding to the specified serial number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceGetDeviceBySerialNumberResponseBody</returns>
        DeviceGetDeviceBySerialNumberResponseBody DeviceGetDeviceBySerialNumber (string serialNumber, string authorization);

        /// <summary>
        /// getDeviceBySerialNumber device
        /// </summary>
        /// <remarks>
        /// Returns information about the device corresponding to the specified serial number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceGetDeviceBySerialNumberResponseBody</returns>
        ApiResponse<DeviceGetDeviceBySerialNumberResponseBody> DeviceGetDeviceBySerialNumberWithHttpInfo (string serialNumber, string authorization);
        /// <summary>
        /// getDevicesBySite device
        /// </summary>
        /// <remarks>
        /// Get All Devices by Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceStoredDeviceResponseCollection</returns>
        DeviceStoredDeviceResponseCollection DeviceGetDevicesBySite (int? siteId, string authorization);

        /// <summary>
        /// getDevicesBySite device
        /// </summary>
        /// <remarks>
        /// Get All Devices by Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceStoredDeviceResponseCollection</returns>
        ApiResponse<DeviceStoredDeviceResponseCollection> DeviceGetDevicesBySiteWithHttpInfo (int? siteId, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getAllDevices device
        /// </summary>
        /// <remarks>
        /// Returns information about all devices to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceStoredDeviceResponseCollection</returns>
        System.Threading.Tasks.Task<DeviceStoredDeviceResponseCollection> DeviceGetAllDevicesAsync (string authorization);

        /// <summary>
        /// getAllDevices device
        /// </summary>
        /// <remarks>
        /// Returns information about all devices to which the client has access
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceStoredDeviceResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceStoredDeviceResponseCollection>> DeviceGetAllDevicesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getDeviceById device
        /// </summary>
        /// <remarks>
        /// Returns information about the specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceGetDeviceByIDResponseBody</returns>
        System.Threading.Tasks.Task<DeviceGetDeviceByIDResponseBody> DeviceGetDeviceByIdAsync (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getDeviceById device
        /// </summary>
        /// <remarks>
        /// Returns information about the specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceGetDeviceByIDResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceGetDeviceByIDResponseBody>> DeviceGetDeviceByIdAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        /// <summary>
        /// getDeviceBySerialNumber device
        /// </summary>
        /// <remarks>
        /// Returns information about the device corresponding to the specified serial number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceGetDeviceBySerialNumberResponseBody</returns>
        System.Threading.Tasks.Task<DeviceGetDeviceBySerialNumberResponseBody> DeviceGetDeviceBySerialNumberAsync (string serialNumber, string authorization);

        /// <summary>
        /// getDeviceBySerialNumber device
        /// </summary>
        /// <remarks>
        /// Returns information about the device corresponding to the specified serial number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceGetDeviceBySerialNumberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceGetDeviceBySerialNumberResponseBody>> DeviceGetDeviceBySerialNumberAsyncWithHttpInfo (string serialNumber, string authorization);
        /// <summary>
        /// getDevicesBySite device
        /// </summary>
        /// <remarks>
        /// Get All Devices by Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceStoredDeviceResponseCollection</returns>
        System.Threading.Tasks.Task<DeviceStoredDeviceResponseCollection> DeviceGetDevicesBySiteAsync (int? siteId, string authorization);

        /// <summary>
        /// getDevicesBySite device
        /// </summary>
        /// <remarks>
        /// Get All Devices by Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceStoredDeviceResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceStoredDeviceResponseCollection>> DeviceGetDevicesBySiteAsyncWithHttpInfo (int? siteId, string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getAllDevices device Returns information about all devices to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceStoredDeviceResponseCollection</returns>
        public DeviceStoredDeviceResponseCollection DeviceGetAllDevices (string authorization)
        {
             ApiResponse<DeviceStoredDeviceResponseCollection> localVarResponse = DeviceGetAllDevicesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllDevices device Returns information about all devices to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceStoredDeviceResponseCollection</returns>
        public ApiResponse< DeviceStoredDeviceResponseCollection > DeviceGetAllDevicesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetAllDevices");

            var localVarPath = "/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetAllDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceStoredDeviceResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceStoredDeviceResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceStoredDeviceResponseCollection)));
        }

        /// <summary>
        /// getAllDevices device Returns information about all devices to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceStoredDeviceResponseCollection</returns>
        public async System.Threading.Tasks.Task<DeviceStoredDeviceResponseCollection> DeviceGetAllDevicesAsync (string authorization)
        {
             ApiResponse<DeviceStoredDeviceResponseCollection> localVarResponse = await DeviceGetAllDevicesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllDevices device Returns information about all devices to which the client has access
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceStoredDeviceResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceStoredDeviceResponseCollection>> DeviceGetAllDevicesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetAllDevices");

            var localVarPath = "/device";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetAllDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceStoredDeviceResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceStoredDeviceResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceStoredDeviceResponseCollection)));
        }

        /// <summary>
        /// getDeviceById device Returns information about the specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceGetDeviceByIDResponseBody</returns>
        public DeviceGetDeviceByIDResponseBody DeviceGetDeviceById (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<DeviceGetDeviceByIDResponseBody> localVarResponse = DeviceGetDeviceByIdWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDeviceById device Returns information about the specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceGetDeviceByIDResponseBody</returns>
        public ApiResponse< DeviceGetDeviceByIDResponseBody > DeviceGetDeviceByIdWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling DeviceApi->DeviceGetDeviceById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDeviceById");

            var localVarPath = "/device/id/{DeviceChildIdDefunct}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDeviceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceGetDeviceByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceGetDeviceByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceGetDeviceByIDResponseBody)));
        }

        /// <summary>
        /// getDeviceById device Returns information about the specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceGetDeviceByIDResponseBody</returns>
        public async System.Threading.Tasks.Task<DeviceGetDeviceByIDResponseBody> DeviceGetDeviceByIdAsync (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<DeviceGetDeviceByIDResponseBody> localVarResponse = await DeviceGetDeviceByIdAsyncWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDeviceById device Returns information about the specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceGetDeviceByIDResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceGetDeviceByIDResponseBody>> DeviceGetDeviceByIdAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling DeviceApi->DeviceGetDeviceById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDeviceById");

            var localVarPath = "/device/id/{DeviceChildIdDefunct}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDeviceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceGetDeviceByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceGetDeviceByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceGetDeviceByIDResponseBody)));
        }

        /// <summary>
        /// getDeviceBySerialNumber device Returns information about the device corresponding to the specified serial number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceGetDeviceBySerialNumberResponseBody</returns>
        public DeviceGetDeviceBySerialNumberResponseBody DeviceGetDeviceBySerialNumber (string serialNumber, string authorization)
        {
             ApiResponse<DeviceGetDeviceBySerialNumberResponseBody> localVarResponse = DeviceGetDeviceBySerialNumberWithHttpInfo(serialNumber, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDeviceBySerialNumber device Returns information about the device corresponding to the specified serial number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceGetDeviceBySerialNumberResponseBody</returns>
        public ApiResponse< DeviceGetDeviceBySerialNumberResponseBody > DeviceGetDeviceBySerialNumberWithHttpInfo (string serialNumber, string authorization)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling DeviceApi->DeviceGetDeviceBySerialNumber");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDeviceBySerialNumber");

            var localVarPath = "/device/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumber != null) localVarPathParams.Add("serialNumber", this.Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDeviceBySerialNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceGetDeviceBySerialNumberResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceGetDeviceBySerialNumberResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceGetDeviceBySerialNumberResponseBody)));
        }

        /// <summary>
        /// getDeviceBySerialNumber device Returns information about the device corresponding to the specified serial number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceGetDeviceBySerialNumberResponseBody</returns>
        public async System.Threading.Tasks.Task<DeviceGetDeviceBySerialNumberResponseBody> DeviceGetDeviceBySerialNumberAsync (string serialNumber, string authorization)
        {
             ApiResponse<DeviceGetDeviceBySerialNumberResponseBody> localVarResponse = await DeviceGetDeviceBySerialNumberAsyncWithHttpInfo(serialNumber, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDeviceBySerialNumber device Returns information about the device corresponding to the specified serial number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Serial number of the device whose information should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceGetDeviceBySerialNumberResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceGetDeviceBySerialNumberResponseBody>> DeviceGetDeviceBySerialNumberAsyncWithHttpInfo (string serialNumber, string authorization)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling DeviceApi->DeviceGetDeviceBySerialNumber");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDeviceBySerialNumber");

            var localVarPath = "/device/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumber != null) localVarPathParams.Add("serialNumber", this.Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDeviceBySerialNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceGetDeviceBySerialNumberResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceGetDeviceBySerialNumberResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceGetDeviceBySerialNumberResponseBody)));
        }

        /// <summary>
        /// getDevicesBySite device Get All Devices by Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>DeviceStoredDeviceResponseCollection</returns>
        public DeviceStoredDeviceResponseCollection DeviceGetDevicesBySite (int? siteId, string authorization)
        {
             ApiResponse<DeviceStoredDeviceResponseCollection> localVarResponse = DeviceGetDevicesBySiteWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDevicesBySite device Get All Devices by Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of DeviceStoredDeviceResponseCollection</returns>
        public ApiResponse< DeviceStoredDeviceResponseCollection > DeviceGetDevicesBySiteWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling DeviceApi->DeviceGetDevicesBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDevicesBySite");

            var localVarPath = "/site/{siteId}/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDevicesBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceStoredDeviceResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceStoredDeviceResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceStoredDeviceResponseCollection)));
        }

        /// <summary>
        /// getDevicesBySite device Get All Devices by Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of DeviceStoredDeviceResponseCollection</returns>
        public async System.Threading.Tasks.Task<DeviceStoredDeviceResponseCollection> DeviceGetDevicesBySiteAsync (int? siteId, string authorization)
        {
             ApiResponse<DeviceStoredDeviceResponseCollection> localVarResponse = await DeviceGetDevicesBySiteAsyncWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDevicesBySite device Get All Devices by Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (DeviceStoredDeviceResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceStoredDeviceResponseCollection>> DeviceGetDevicesBySiteAsyncWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling DeviceApi->DeviceGetDevicesBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DeviceApi->DeviceGetDevicesBySite");

            var localVarPath = "/site/{siteId}/devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceGetDevicesBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceStoredDeviceResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceStoredDeviceResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceStoredDeviceResponseCollection)));
        }

    }
}
