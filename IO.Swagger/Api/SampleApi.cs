/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISampleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ackSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Notify which Sample was the Last Sample Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        void SampleAckSampleScalarBatch (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Notify which Sample was the Last Sample Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SampleAckSampleScalarBatchWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getLastSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetLastSampleScalarBatchResponseBody</returns>
        SampleGetLastSampleScalarBatchResponseBody SampleGetLastSampleScalarBatch (string authorization);

        /// <summary>
        /// getLastSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetLastSampleScalarBatchResponseBody</returns>
        ApiResponse<SampleGetLastSampleScalarBatchResponseBody> SampleGetLastSampleScalarBatchWithHttpInfo (string authorization);
        /// <summary>
        /// getLastSampleScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetLastSampleScalarByStreamResponseBody</returns>
        SampleGetLastSampleScalarByStreamResponseBody SampleGetLastSampleScalarByStream (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetLastSampleScalarByStreamResponseBody</returns>
        ApiResponse<SampleGetLastSampleScalarByStreamResponseBody> SampleGetLastSampleScalarByStreamWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get a Batch of New SamplesScalar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>SampleGetSamplesScalarBatchResponseBody</returns>
        SampleGetSamplesScalarBatchResponseBody SampleGetSamplesScalarBatch (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get a Batch of New SamplesScalar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchResponseBody</returns>
        ApiResponse<SampleGetSamplesScalarBatchResponseBody> SampleGetSamplesScalarBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesScalarBatchBySite sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        SampleGetSamplesScalarBatchBySiteResponseBody SampleGetSamplesScalarBatchBySite (int? siteId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesScalarBatchBySite sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody> SampleGetSamplesScalarBatchBySiteWithHttpInfo (int? siteId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesScalarBatchByStream sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        SampleGetSamplesScalarBatchByStreamResponseBody SampleGetSamplesScalarBatchByStream (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesScalarBatchByStream sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody> SampleGetSamplesScalarBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>SampleStoredSampleScalarResponseCollection</returns>
        SampleStoredSampleScalarResponseCollection SampleGetSamplesScalarByStream (int? streamId, string authorization, int? lastSampleId = null);

        /// <summary>
        /// getSamplesScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>ApiResponse of SampleStoredSampleScalarResponseCollection</returns>
        ApiResponse<SampleStoredSampleScalarResponseCollection> SampleGetSamplesScalarByStreamWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null);
        /// <summary>
        /// setBackfillSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        void SampleSetBackfillSamplesScalarBatch (int? sampleDate, string authorization, string agent = null);

        /// <summary>
        /// setBackfillSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SampleSetBackfillSamplesScalarBatchWithHttpInfo (int? sampleDate, string authorization, string agent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// ackSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Notify which Sample was the Last Sample Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SampleAckSampleScalarBatchAsync (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Notify which Sample was the Last Sample Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SampleAckSampleScalarBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getLastSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetLastSampleScalarBatchResponseBody</returns>
        System.Threading.Tasks.Task<SampleGetLastSampleScalarBatchResponseBody> SampleGetLastSampleScalarBatchAsync (string authorization);

        /// <summary>
        /// getLastSampleScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetLastSampleScalarBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleGetLastSampleScalarBatchResponseBody>> SampleGetLastSampleScalarBatchAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getLastSampleScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetLastSampleScalarByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SampleGetLastSampleScalarByStreamResponseBody> SampleGetLastSampleScalarByStreamAsync (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetLastSampleScalarByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleGetLastSampleScalarByStreamResponseBody>> SampleGetLastSampleScalarByStreamAsyncWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get a Batch of New SamplesScalar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>Task of SampleGetSamplesScalarBatchResponseBody</returns>
        System.Threading.Tasks.Task<SampleGetSamplesScalarBatchResponseBody> SampleGetSamplesScalarBatchAsync (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Get a Batch of New SamplesScalar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchResponseBody>> SampleGetSamplesScalarBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesScalarBatchBySite sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        System.Threading.Tasks.Task<SampleGetSamplesScalarBatchBySiteResponseBody> SampleGetSamplesScalarBatchBySiteAsync (int? siteId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesScalarBatchBySite sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchBySiteResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody>> SampleGetSamplesScalarBatchBySiteAsyncWithHttpInfo (int? siteId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesScalarBatchByStream sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SampleGetSamplesScalarBatchByStreamResponseBody> SampleGetSamplesScalarBatchByStreamAsync (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesScalarBatchByStream sample
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent SamplesScalar of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody>> SampleGetSamplesScalarBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of SampleStoredSampleScalarResponseCollection</returns>
        System.Threading.Tasks.Task<SampleStoredSampleScalarResponseCollection> SampleGetSamplesScalarByStreamAsync (int? streamId, string authorization, int? lastSampleId = null);

        /// <summary>
        /// getSamplesScalarByStream sample
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of ApiResponse (SampleStoredSampleScalarResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleStoredSampleScalarResponseCollection>> SampleGetSamplesScalarByStreamAsyncWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null);
        /// <summary>
        /// setBackfillSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SampleSetBackfillSamplesScalarBatchAsync (int? sampleDate, string authorization, string agent = null);

        /// <summary>
        /// setBackfillSamplesScalarBatch sample
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next SamplesScalar Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SampleSetBackfillSamplesScalarBatchAsyncWithHttpInfo (int? sampleDate, string authorization, string agent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SampleApi : ISampleApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SampleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SampleApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SampleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SampleApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// ackSampleScalarBatch sample Notify which Sample was the Last Sample Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        public void SampleAckSampleScalarBatch (int? sampleId, string authorization, string agent = null)
        {
             SampleAckSampleScalarBatchWithHttpInfo(sampleId, authorization, agent);
        }

        /// <summary>
        /// ackSampleScalarBatch sample Notify which Sample was the Last Sample Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SampleAckSampleScalarBatchWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SampleApi->SampleAckSampleScalarBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleAckSampleScalarBatch");

            var localVarPath = "/sample/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleAckSampleScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// ackSampleScalarBatch sample Notify which Sample was the Last Sample Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SampleAckSampleScalarBatchAsync (int? sampleId, string authorization, string agent = null)
        {
             await SampleAckSampleScalarBatchAsyncWithHttpInfo(sampleId, authorization, agent);

        }

        /// <summary>
        /// ackSampleScalarBatch sample Notify which Sample was the Last Sample Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SampleAckSampleScalarBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SampleApi->SampleAckSampleScalarBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleAckSampleScalarBatch");

            var localVarPath = "/sample/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleAckSampleScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getLastSampleScalarBatch sample Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetLastSampleScalarBatchResponseBody</returns>
        public SampleGetLastSampleScalarBatchResponseBody SampleGetLastSampleScalarBatch (string authorization)
        {
             ApiResponse<SampleGetLastSampleScalarBatchResponseBody> localVarResponse = SampleGetLastSampleScalarBatchWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getLastSampleScalarBatch sample Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetLastSampleScalarBatchResponseBody</returns>
        public ApiResponse< SampleGetLastSampleScalarBatchResponseBody > SampleGetLastSampleScalarBatchWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetLastSampleScalarBatch");

            var localVarPath = "/sample/batch/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetLastSampleScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetLastSampleScalarBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetLastSampleScalarBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetLastSampleScalarBatchResponseBody)));
        }

        /// <summary>
        /// getLastSampleScalarBatch sample Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetLastSampleScalarBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleGetLastSampleScalarBatchResponseBody> SampleGetLastSampleScalarBatchAsync (string authorization)
        {
             ApiResponse<SampleGetLastSampleScalarBatchResponseBody> localVarResponse = await SampleGetLastSampleScalarBatchAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getLastSampleScalarBatch sample Get the Last Delivered Sample of the Last Delivered SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetLastSampleScalarBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleGetLastSampleScalarBatchResponseBody>> SampleGetLastSampleScalarBatchAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetLastSampleScalarBatch");

            var localVarPath = "/sample/batch/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetLastSampleScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetLastSampleScalarBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetLastSampleScalarBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetLastSampleScalarBatchResponseBody)));
        }

        /// <summary>
        /// getLastSampleScalarByStream sample Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetLastSampleScalarByStreamResponseBody</returns>
        public SampleGetLastSampleScalarByStreamResponseBody SampleGetLastSampleScalarByStream (int? streamId, string authorization)
        {
             ApiResponse<SampleGetLastSampleScalarByStreamResponseBody> localVarResponse = SampleGetLastSampleScalarByStreamWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getLastSampleScalarByStream sample Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetLastSampleScalarByStreamResponseBody</returns>
        public ApiResponse< SampleGetLastSampleScalarByStreamResponseBody > SampleGetLastSampleScalarByStreamWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetLastSampleScalarByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetLastSampleScalarByStream");

            var localVarPath = "/stream/{streamId}/sample/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetLastSampleScalarByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetLastSampleScalarByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetLastSampleScalarByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetLastSampleScalarByStreamResponseBody)));
        }

        /// <summary>
        /// getLastSampleScalarByStream sample Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetLastSampleScalarByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleGetLastSampleScalarByStreamResponseBody> SampleGetLastSampleScalarByStreamAsync (int? streamId, string authorization)
        {
             ApiResponse<SampleGetLastSampleScalarByStreamResponseBody> localVarResponse = await SampleGetLastSampleScalarByStreamAsyncWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getLastSampleScalarByStream sample Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetLastSampleScalarByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleGetLastSampleScalarByStreamResponseBody>> SampleGetLastSampleScalarByStreamAsyncWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetLastSampleScalarByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetLastSampleScalarByStream");

            var localVarPath = "/stream/{streamId}/sample/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetLastSampleScalarByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetLastSampleScalarByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetLastSampleScalarByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetLastSampleScalarByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatch sample Get a Batch of New SamplesScalar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>SampleGetSamplesScalarBatchResponseBody</returns>
        public SampleGetSamplesScalarBatchResponseBody SampleGetSamplesScalarBatch (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
             ApiResponse<SampleGetSamplesScalarBatchResponseBody> localVarResponse = SampleGetSamplesScalarBatchWithHttpInfo(authorization, enableAck, sampleID, backfillHours);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesScalarBatch sample Get a Batch of New SamplesScalar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchResponseBody</returns>
        public ApiResponse< SampleGetSamplesScalarBatchResponseBody > SampleGetSamplesScalarBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatch");

            var localVarPath = "/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleID", sampleID)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatch sample Get a Batch of New SamplesScalar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>Task of SampleGetSamplesScalarBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleGetSamplesScalarBatchResponseBody> SampleGetSamplesScalarBatchAsync (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
             ApiResponse<SampleGetSamplesScalarBatchResponseBody> localVarResponse = await SampleGetSamplesScalarBatchAsyncWithHttpInfo(authorization, enableAck, sampleID, backfillHours);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesScalarBatch sample Get a Batch of New SamplesScalar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample id value is set to the last sample ID in the batch sent in response to this call (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchResponseBody>> SampleGetSamplesScalarBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatch");

            var localVarPath = "/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleID", sampleID)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatchBySite sample Get Batch of Recent SamplesScalar of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        public SampleGetSamplesScalarBatchBySiteResponseBody SampleGetSamplesScalarBatchBySite (int? siteId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody> localVarResponse = SampleGetSamplesScalarBatchBySiteWithHttpInfo(siteId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesScalarBatchBySite sample Get Batch of Recent SamplesScalar of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        public ApiResponse< SampleGetSamplesScalarBatchBySiteResponseBody > SampleGetSamplesScalarBatchBySiteWithHttpInfo (int? siteId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SampleApi->SampleGetSamplesScalarBatchBySite");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleGetSamplesScalarBatchBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatchBySite");

            var localVarPath = "/site/{siteId}/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatchBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchBySiteResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchBySiteResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatchBySite sample Get Batch of Recent SamplesScalar of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetSamplesScalarBatchBySiteResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleGetSamplesScalarBatchBySiteResponseBody> SampleGetSamplesScalarBatchBySiteAsync (int? siteId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody> localVarResponse = await SampleGetSamplesScalarBatchBySiteAsyncWithHttpInfo(siteId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesScalarBatchBySite sample Get Batch of Recent SamplesScalar of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchBySiteResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody>> SampleGetSamplesScalarBatchBySiteAsyncWithHttpInfo (int? siteId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SampleApi->SampleGetSamplesScalarBatchBySite");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleGetSamplesScalarBatchBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatchBySite");

            var localVarPath = "/site/{siteId}/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatchBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchBySiteResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchBySiteResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchBySiteResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatchByStream sample Get Batch of Recent SamplesScalar of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        public SampleGetSamplesScalarBatchByStreamResponseBody SampleGetSamplesScalarBatchByStream (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody> localVarResponse = SampleGetSamplesScalarBatchByStreamWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesScalarBatchByStream sample Get Batch of Recent SamplesScalar of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        public ApiResponse< SampleGetSamplesScalarBatchByStreamResponseBody > SampleGetSamplesScalarBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetSamplesScalarBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleGetSamplesScalarBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarBatchByStream sample Get Batch of Recent SamplesScalar of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleGetSamplesScalarBatchByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleGetSamplesScalarBatchByStreamResponseBody> SampleGetSamplesScalarBatchByStreamAsync (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody> localVarResponse = await SampleGetSamplesScalarBatchByStreamAsyncWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesScalarBatchByStream sample Get Batch of Recent SamplesScalar of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleGetSamplesScalarBatchByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody>> SampleGetSamplesScalarBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetSamplesScalarBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleGetSamplesScalarBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleGetSamplesScalarBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleGetSamplesScalarBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleGetSamplesScalarBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesScalarByStream sample Returns up to 100 samples from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>SampleStoredSampleScalarResponseCollection</returns>
        public SampleStoredSampleScalarResponseCollection SampleGetSamplesScalarByStream (int? streamId, string authorization, int? lastSampleId = null)
        {
             ApiResponse<SampleStoredSampleScalarResponseCollection> localVarResponse = SampleGetSamplesScalarByStreamWithHttpInfo(streamId, authorization, lastSampleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesScalarByStream sample Returns up to 100 samples from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>ApiResponse of SampleStoredSampleScalarResponseCollection</returns>
        public ApiResponse< SampleStoredSampleScalarResponseCollection > SampleGetSamplesScalarByStreamWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetSamplesScalarByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarByStream");

            var localVarPath = "/stream/{streamId}/sample";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (lastSampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSampleId", lastSampleId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleStoredSampleScalarResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleStoredSampleScalarResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleStoredSampleScalarResponseCollection)));
        }

        /// <summary>
        /// getSamplesScalarByStream sample Returns up to 100 samples from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of SampleStoredSampleScalarResponseCollection</returns>
        public async System.Threading.Tasks.Task<SampleStoredSampleScalarResponseCollection> SampleGetSamplesScalarByStreamAsync (int? streamId, string authorization, int? lastSampleId = null)
        {
             ApiResponse<SampleStoredSampleScalarResponseCollection> localVarResponse = await SampleGetSamplesScalarByStreamAsyncWithHttpInfo(streamId, authorization, lastSampleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesScalarByStream sample Returns up to 100 samples from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of ApiResponse (SampleStoredSampleScalarResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleStoredSampleScalarResponseCollection>> SampleGetSamplesScalarByStreamAsyncWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleApi->SampleGetSamplesScalarByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleGetSamplesScalarByStream");

            var localVarPath = "/stream/{streamId}/sample";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (lastSampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSampleId", lastSampleId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleGetSamplesScalarByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleStoredSampleScalarResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleStoredSampleScalarResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleStoredSampleScalarResponseCollection)));
        }

        /// <summary>
        /// setBackfillSamplesScalarBatch sample Reset the DateTime starting point for the next SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        public void SampleSetBackfillSamplesScalarBatch (int? sampleDate, string authorization, string agent = null)
        {
             SampleSetBackfillSamplesScalarBatchWithHttpInfo(sampleDate, authorization, agent);
        }

        /// <summary>
        /// setBackfillSamplesScalarBatch sample Reset the DateTime starting point for the next SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SampleSetBackfillSamplesScalarBatchWithHttpInfo (int? sampleDate, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleSetBackfillSamplesScalarBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleSetBackfillSamplesScalarBatch");

            var localVarPath = "/sample/batch/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleSetBackfillSamplesScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setBackfillSamplesScalarBatch sample Reset the DateTime starting point for the next SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SampleSetBackfillSamplesScalarBatchAsync (int? sampleDate, string authorization, string agent = null)
        {
             await SampleSetBackfillSamplesScalarBatchAsyncWithHttpInfo(sampleDate, authorization, agent);

        }

        /// <summary>
        /// setBackfillSamplesScalarBatch sample Reset the DateTime starting point for the next SamplesScalar Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SampleSetBackfillSamplesScalarBatchAsyncWithHttpInfo (int? sampleDate, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleApi->SampleSetBackfillSamplesScalarBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleApi->SampleSetBackfillSamplesScalarBatch");

            var localVarPath = "/sample/batch/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleSetBackfillSamplesScalarBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
