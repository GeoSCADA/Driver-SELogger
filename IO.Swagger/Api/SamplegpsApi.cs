/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISamplegpsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ackSampleGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns></returns>
        void SamplegpsAckSampleGPSBatch (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SamplegpsAckSampleGPSBatchWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps
        /// </summary>
        /// <remarks>
        /// Returns GPS information about specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        SamplegpsGetGPSByDeviceChildIdDefunctResponseBody SamplegpsGetGPSByDeviceChildIdDefunct (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps
        /// </summary>
        /// <remarks>
        /// Returns GPS information about specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody> SamplegpsGetGPSByDeviceChildIdDefunctWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        /// <summary>
        /// getSamplesGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>SamplegpsGetSamplesGPSBatchResponseBody</returns>
        SamplegpsGetSamplesGPSBatchResponseBody SamplegpsGetSamplesGPSBatch (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SamplegpsGetSamplesGPSBatchResponseBody</returns>
        ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody> SamplegpsGetSamplesGPSBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesGPSBatchByStream samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS by stream id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        SamplegpsGetSamplesGPSBatchByStreamResponseBody SamplegpsGetSamplesGPSBatchByStream (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS by stream id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody> SamplegpsGetSamplesGPSBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// ackSampleGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SamplegpsAckSampleGPSBatchAsync (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SamplegpsAckSampleGPSBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps
        /// </summary>
        /// <remarks>
        /// Returns GPS information about specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        System.Threading.Tasks.Task<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody> SamplegpsGetGPSByDeviceChildIdDefunctAsync (int? DeviceChildIdDefunct, string authorization);

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps
        /// </summary>
        /// <remarks>
        /// Returns GPS information about specified device
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplegpsGetGPSByDeviceChildIdDefunctResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody>> SamplegpsGetGPSByDeviceChildIdDefunctAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization);
        /// <summary>
        /// getSamplesGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>Task of SamplegpsGetSamplesGPSBatchResponseBody</returns>
        System.Threading.Tasks.Task<SamplegpsGetSamplesGPSBatchResponseBody> SamplegpsGetSamplesGPSBatchAsync (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesGPSBatch samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SamplegpsGetSamplesGPSBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody>> SamplegpsGetSamplesGPSBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesGPSBatchByStream samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS by stream id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SamplegpsGetSamplesGPSBatchByStreamResponseBody> SamplegpsGetSamplesGPSBatchByStreamAsync (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples GPS by stream id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplegpsGetSamplesGPSBatchByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody>> SamplegpsGetSamplesGPSBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SamplegpsApi : ISamplegpsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SamplegpsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SamplegpsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SamplegpsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SamplegpsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// ackSampleGPSBatch samplegps Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns></returns>
        public void SamplegpsAckSampleGPSBatch (int? sampleId, string authorization, string agent = null)
        {
             SamplegpsAckSampleGPSBatchWithHttpInfo(sampleId, authorization, agent);
        }

        /// <summary>
        /// ackSampleGPSBatch samplegps Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SamplegpsAckSampleGPSBatchWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SamplegpsApi->SamplegpsAckSampleGPSBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsAckSampleGPSBatch");

            var localVarPath = "/sample/gps/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsAckSampleGPSBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// ackSampleGPSBatch samplegps Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SamplegpsAckSampleGPSBatchAsync (int? sampleId, string authorization, string agent = null)
        {
             await SamplegpsAckSampleGPSBatchAsyncWithHttpInfo(sampleId, authorization, agent);

        }

        /// <summary>
        /// ackSampleGPSBatch samplegps Notify which Sample GPS was the Last Sample GPS Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample GPS id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleGPSs batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SamplegpsAckSampleGPSBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SamplegpsApi->SamplegpsAckSampleGPSBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsAckSampleGPSBatch");

            var localVarPath = "/sample/gps/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsAckSampleGPSBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps Returns GPS information about specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        public SamplegpsGetGPSByDeviceChildIdDefunctResponseBody SamplegpsGetGPSByDeviceChildIdDefunct (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody> localVarResponse = SamplegpsGetGPSByDeviceChildIdDefunctWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps Returns GPS information about specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        public ApiResponse< SamplegpsGetGPSByDeviceChildIdDefunctResponseBody > SamplegpsGetGPSByDeviceChildIdDefunctWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling SamplegpsApi->SamplegpsGetGPSByDeviceChildIdDefunct");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetGPSByDeviceChildIdDefunct");

            var localVarPath = "/device/id/{DeviceChildIdDefunct}/sample/gps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetGPSByDeviceChildIdDefunct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetGPSByDeviceChildIdDefunctResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetGPSByDeviceChildIdDefunctResponseBody)));
        }

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps Returns GPS information about specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplegpsGetGPSByDeviceChildIdDefunctResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody> SamplegpsGetGPSByDeviceChildIdDefunctAsync (int? DeviceChildIdDefunct, string authorization)
        {
             ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody> localVarResponse = await SamplegpsGetGPSByDeviceChildIdDefunctAsyncWithHttpInfo(DeviceChildIdDefunct, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getGPSByDeviceChildIdDefunct samplegps Returns GPS information about specified device
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="DeviceChildIdDefunct">ID of the device whose GPS data should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplegpsGetGPSByDeviceChildIdDefunctResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody>> SamplegpsGetGPSByDeviceChildIdDefunctAsyncWithHttpInfo (int? DeviceChildIdDefunct, string authorization)
        {
            // verify the required parameter 'DeviceChildIdDefunct' is set
            if (DeviceChildIdDefunct == null)
                throw new ApiException(400, "Missing required parameter 'DeviceChildIdDefunct' when calling SamplegpsApi->SamplegpsGetGPSByDeviceChildIdDefunct");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetGPSByDeviceChildIdDefunct");

            var localVarPath = "/device/id/{DeviceChildIdDefunct}/sample/gps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (DeviceChildIdDefunct != null) localVarPathParams.Add("DeviceChildIdDefunct", this.Configuration.ApiClient.ParameterToString(DeviceChildIdDefunct)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetGPSByDeviceChildIdDefunct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetGPSByDeviceChildIdDefunctResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetGPSByDeviceChildIdDefunctResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetGPSByDeviceChildIdDefunctResponseBody)));
        }

        /// <summary>
        /// getSamplesGPSBatch samplegps Get a Batch of New Samples GPS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>SamplegpsGetSamplesGPSBatchResponseBody</returns>
        public SamplegpsGetSamplesGPSBatchResponseBody SamplegpsGetSamplesGPSBatch (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
             ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody> localVarResponse = SamplegpsGetSamplesGPSBatchWithHttpInfo(authorization, enableAck, sampleID, backfillHours);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesGPSBatch samplegps Get a Batch of New Samples GPS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SamplegpsGetSamplesGPSBatchResponseBody</returns>
        public ApiResponse< SamplegpsGetSamplesGPSBatchResponseBody > SamplegpsGetSamplesGPSBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatch");

            var localVarPath = "/sample/gps/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleID", sampleID)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetSamplesGPSBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetSamplesGPSBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetSamplesGPSBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesGPSBatch samplegps Get a Batch of New Samples GPS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>Task of SamplegpsGetSamplesGPSBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplegpsGetSamplesGPSBatchResponseBody> SamplegpsGetSamplesGPSBatchAsync (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
             ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody> localVarResponse = await SamplegpsGetSamplesGPSBatchAsyncWithHttpInfo(authorization, enableAck, sampleID, backfillHours);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesGPSBatch samplegps Get a Batch of New Samples GPS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample GPS id value is set to the last sample GPS ID in the batch sent in response to this call. If set to true, then the internal last delivered sample GPS id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesGPSBatch to update the last delivered sample GPS id field (optional, default to true)</param>
        /// <param name="sampleID">Specifies to send samples GPS with an ID number strictly higher than the sampleID. For example, if the sampleID value is 1234, the response could include samples GPS with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples GPS starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples GPS of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SamplegpsGetSamplesGPSBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody>> SamplegpsGetSamplesGPSBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleID = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatch");

            var localVarPath = "/sample/gps/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleID", sampleID)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetSamplesGPSBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetSamplesGPSBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetSamplesGPSBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetSamplesGPSBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps Get a Batch of New Samples GPS by stream id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        public SamplegpsGetSamplesGPSBatchByStreamResponseBody SamplegpsGetSamplesGPSBatchByStream (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody> localVarResponse = SamplegpsGetSamplesGPSBatchByStreamWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps Get a Batch of New Samples GPS by stream id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        public ApiResponse< SamplegpsGetSamplesGPSBatchByStreamResponseBody > SamplegpsGetSamplesGPSBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/gps/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetSamplesGPSBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetSamplesGPSBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetSamplesGPSBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps Get a Batch of New Samples GPS by stream id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplegpsGetSamplesGPSBatchByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplegpsGetSamplesGPSBatchByStreamResponseBody> SamplegpsGetSamplesGPSBatchByStreamAsync (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody> localVarResponse = await SamplegpsGetSamplesGPSBatchByStreamAsyncWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesGPSBatchByStream samplegps Get a Batch of New Samples GPS by stream id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples GPS should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample GPS in the batch (Epoch timestamp &gt;946688460)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplegpsGetSamplesGPSBatchByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody>> SamplegpsGetSamplesGPSBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplegpsApi->SamplegpsGetSamplesGPSBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/gps/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplegpsGetSamplesGPSBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplegpsGetSamplesGPSBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplegpsGetSamplesGPSBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplegpsGetSamplesGPSBatchByStreamResponseBody)));
        }

    }
}
