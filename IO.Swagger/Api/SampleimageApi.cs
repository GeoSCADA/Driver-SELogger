/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISampleimageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getLastSampleImageByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Last Image Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetLastSampleImageByStreamResponseBody</returns>
        SampleimageGetLastSampleImageByStreamResponseBody SampleimageGetLastSampleImageByStream (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleImageByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Last Image Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetLastSampleImageByStreamResponseBody</returns>
        ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody> SampleimageGetLastSampleImageByStreamWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSampleImageById sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Sample by Id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSampleImageByIDResponseBody</returns>
        SampleimageGetSampleImageByIDResponseBody SampleimageGetSampleImageById (int? imageId, string authorization);

        /// <summary>
        /// getSampleImageById sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Sample by Id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSampleImageByIDResponseBody</returns>
        ApiResponse<SampleimageGetSampleImageByIDResponseBody> SampleimageGetSampleImageByIdWithHttpInfo (int? imageId, string authorization);
        /// <summary>
        /// getSamplesImageBatch sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSamplesImageBatchResponseBody</returns>
        SampleimageGetSamplesImageBatchResponseBody SampleimageGetSamplesImageBatch (int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesImageBatch sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSamplesImageBatchResponseBody</returns>
        ApiResponse<SampleimageGetSamplesImageBatchResponseBody> SampleimageGetSamplesImageBatchWithHttpInfo (int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesImageBatchByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch By Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        SampleimageGetSamplesImageBatchByStreamResponseBody SampleimageGetSamplesImageBatchByStream (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch By Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody> SampleimageGetSamplesImageBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getLastSampleImageByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Last Image Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetLastSampleImageByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SampleimageGetLastSampleImageByStreamResponseBody> SampleimageGetLastSampleImageByStreamAsync (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleImageByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Last Image Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetLastSampleImageByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody>> SampleimageGetLastSampleImageByStreamAsyncWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSampleImageById sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Sample by Id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSampleImageByIDResponseBody</returns>
        System.Threading.Tasks.Task<SampleimageGetSampleImageByIDResponseBody> SampleimageGetSampleImageByIdAsync (int? imageId, string authorization);

        /// <summary>
        /// getSampleImageById sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Sample by Id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSampleImageByIDResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleimageGetSampleImageByIDResponseBody>> SampleimageGetSampleImageByIdAsyncWithHttpInfo (int? imageId, string authorization);
        /// <summary>
        /// getSamplesImageBatch sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSamplesImageBatchResponseBody</returns>
        System.Threading.Tasks.Task<SampleimageGetSamplesImageBatchResponseBody> SampleimageGetSamplesImageBatchAsync (int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesImageBatch sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSamplesImageBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleimageGetSamplesImageBatchResponseBody>> SampleimageGetSamplesImageBatchAsyncWithHttpInfo (int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesImageBatchByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch By Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SampleimageGetSamplesImageBatchByStreamResponseBody> SampleimageGetSamplesImageBatchByStreamAsync (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage
        /// </summary>
        /// <remarks>
        /// Get Image Samples Batch By Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSamplesImageBatchByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody>> SampleimageGetSamplesImageBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SampleimageApi : ISampleimageApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SampleimageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SampleimageApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SampleimageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SampleimageApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getLastSampleImageByStream sampleimage Get Last Image Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetLastSampleImageByStreamResponseBody</returns>
        public SampleimageGetLastSampleImageByStreamResponseBody SampleimageGetLastSampleImageByStream (int? streamId, string authorization)
        {
             ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody> localVarResponse = SampleimageGetLastSampleImageByStreamWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getLastSampleImageByStream sampleimage Get Last Image Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetLastSampleImageByStreamResponseBody</returns>
        public ApiResponse< SampleimageGetLastSampleImageByStreamResponseBody > SampleimageGetLastSampleImageByStreamWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleimageApi->SampleimageGetLastSampleImageByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetLastSampleImageByStream");

            var localVarPath = "/stream/{streamId}/sample/image/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetLastSampleImageByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetLastSampleImageByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetLastSampleImageByStreamResponseBody)));
        }

        /// <summary>
        /// getLastSampleImageByStream sampleimage Get Last Image Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetLastSampleImageByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleimageGetLastSampleImageByStreamResponseBody> SampleimageGetLastSampleImageByStreamAsync (int? streamId, string authorization)
        {
             ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody> localVarResponse = await SampleimageGetLastSampleImageByStreamAsyncWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getLastSampleImageByStream sampleimage Get Last Image Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetLastSampleImageByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody>> SampleimageGetLastSampleImageByStreamAsyncWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleimageApi->SampleimageGetLastSampleImageByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetLastSampleImageByStream");

            var localVarPath = "/stream/{streamId}/sample/image/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetLastSampleImageByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetLastSampleImageByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetLastSampleImageByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetLastSampleImageByStreamResponseBody)));
        }

        /// <summary>
        /// getSampleImageById sampleimage Get Image Sample by Id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSampleImageByIDResponseBody</returns>
        public SampleimageGetSampleImageByIDResponseBody SampleimageGetSampleImageById (int? imageId, string authorization)
        {
             ApiResponse<SampleimageGetSampleImageByIDResponseBody> localVarResponse = SampleimageGetSampleImageByIdWithHttpInfo(imageId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSampleImageById sampleimage Get Image Sample by Id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSampleImageByIDResponseBody</returns>
        public ApiResponse< SampleimageGetSampleImageByIDResponseBody > SampleimageGetSampleImageByIdWithHttpInfo (int? imageId, string authorization)
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling SampleimageApi->SampleimageGetSampleImageById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSampleImageById");

            var localVarPath = "/sample/image/id/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSampleImageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSampleImageByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSampleImageByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSampleImageByIDResponseBody)));
        }

        /// <summary>
        /// getSampleImageById sampleimage Get Image Sample by Id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSampleImageByIDResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleimageGetSampleImageByIDResponseBody> SampleimageGetSampleImageByIdAsync (int? imageId, string authorization)
        {
             ApiResponse<SampleimageGetSampleImageByIDResponseBody> localVarResponse = await SampleimageGetSampleImageByIdAsyncWithHttpInfo(imageId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSampleImageById sampleimage Get Image Sample by Id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image Id of the image that should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSampleImageByIDResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleimageGetSampleImageByIDResponseBody>> SampleimageGetSampleImageByIdAsyncWithHttpInfo (int? imageId, string authorization)
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling SampleimageApi->SampleimageGetSampleImageById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSampleImageById");

            var localVarPath = "/sample/image/id/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSampleImageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSampleImageByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSampleImageByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSampleImageByIDResponseBody)));
        }

        /// <summary>
        /// getSamplesImageBatch sampleimage Get Image Samples Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSamplesImageBatchResponseBody</returns>
        public SampleimageGetSamplesImageBatchResponseBody SampleimageGetSamplesImageBatch (int? sampleDate, string authorization)
        {
             ApiResponse<SampleimageGetSamplesImageBatchResponseBody> localVarResponse = SampleimageGetSamplesImageBatchWithHttpInfo(sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesImageBatch sampleimage Get Image Samples Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSamplesImageBatchResponseBody</returns>
        public ApiResponse< SampleimageGetSamplesImageBatchResponseBody > SampleimageGetSamplesImageBatchWithHttpInfo (int? sampleDate, string authorization)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleimageApi->SampleimageGetSamplesImageBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSamplesImageBatch");

            var localVarPath = "/sample/image/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSamplesImageBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSamplesImageBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSamplesImageBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSamplesImageBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesImageBatch sampleimage Get Image Samples Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSamplesImageBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleimageGetSamplesImageBatchResponseBody> SampleimageGetSamplesImageBatchAsync (int? sampleDate, string authorization)
        {
             ApiResponse<SampleimageGetSamplesImageBatchResponseBody> localVarResponse = await SampleimageGetSamplesImageBatchAsyncWithHttpInfo(sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesImageBatch sampleimage Get Image Samples Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSamplesImageBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleimageGetSamplesImageBatchResponseBody>> SampleimageGetSamplesImageBatchAsyncWithHttpInfo (int? sampleDate, string authorization)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleimageApi->SampleimageGetSamplesImageBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSamplesImageBatch");

            var localVarPath = "/sample/image/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSamplesImageBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSamplesImageBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSamplesImageBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSamplesImageBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage Get Image Samples Batch By Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        public SampleimageGetSamplesImageBatchByStreamResponseBody SampleimageGetSamplesImageBatchByStream (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody> localVarResponse = SampleimageGetSamplesImageBatchByStreamWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage Get Image Samples Batch By Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        public ApiResponse< SampleimageGetSamplesImageBatchByStreamResponseBody > SampleimageGetSamplesImageBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/image/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSamplesImageBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSamplesImageBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSamplesImageBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage Get Image Samples Batch By Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SampleimageGetSamplesImageBatchByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SampleimageGetSamplesImageBatchByStreamResponseBody> SampleimageGetSamplesImageBatchByStreamAsync (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody> localVarResponse = await SampleimageGetSamplesImageBatchByStreamAsyncWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesImageBatchByStream sampleimage Get Image Samples Batch By Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="sampleDate">DateTime of oldest sample in batch in Unix Time format</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SampleimageGetSamplesImageBatchByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody>> SampleimageGetSamplesImageBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SampleimageApi->SampleimageGetSamplesImageBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/image/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SampleimageGetSamplesImageBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SampleimageGetSamplesImageBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SampleimageGetSamplesImageBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SampleimageGetSamplesImageBatchByStreamResponseBody)));
        }

    }
}
