/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISamplerfidApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ackSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns></returns>
        void SamplerfidAckSampleRFIDBatch (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SamplerfidAckSampleRFIDBatchWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getLastSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        SamplerfidGetLastSampleRFIDBatchResponseBody SamplerfidGetLastSampleRFIDBatch (string authorization);

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody> SamplerfidGetLastSampleRFIDBatchWithHttpInfo (string authorization);
        /// <summary>
        /// getLastSampleRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        SamplerfidGetLastSampleRFIDByStreamResponseBody SamplerfidGetLastSampleRFIDByStream (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody> SamplerfidGetLastSampleRFIDByStreamWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples RFID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        SamplerfidGetSamplesRFIDBatchResponseBody SamplerfidGetSamplesRFIDBatch (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples RFID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody> SamplerfidGetSamplesRFIDBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        SamplerfidGetSamplesRFIDBatchBySiteResponseBody SamplerfidGetSamplesRFIDBatchBySite (int? siteId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody> SamplerfidGetSamplesRFIDBatchBySiteWithHttpInfo (int? siteId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        SamplerfidGetSamplesRFIDBatchByStreamResponseBody SamplerfidGetSamplesRFIDBatchByStream (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody> SamplerfidGetSamplesRFIDBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples RFID from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>SamplerfidStoredSampleRFIDResponseCollection</returns>
        SamplerfidStoredSampleRFIDResponseCollection SamplerfidGetSamplesRFIDByStream (int? streamId, string authorization, int? lastSampleId = null);

        /// <summary>
        /// getSamplesRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples RFID from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>ApiResponse of SamplerfidStoredSampleRFIDResponseCollection</returns>
        ApiResponse<SamplerfidStoredSampleRFIDResponseCollection> SamplerfidGetSamplesRFIDByStreamWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null);
        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        void SamplerfidSetBackfillSamplesRFIDBatch (int? sampleDate, string authorization, string agent = null);

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SamplerfidSetBackfillSamplesRFIDBatchWithHttpInfo (int? sampleDate, string authorization, string agent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// ackSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SamplerfidAckSampleRFIDBatchAsync (int? sampleId, string authorization, string agent = null);

        /// <summary>
        /// ackSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SamplerfidAckSampleRFIDBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null);
        /// <summary>
        /// getLastSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        System.Threading.Tasks.Task<SamplerfidGetLastSampleRFIDBatchResponseBody> SamplerfidGetLastSampleRFIDBatchAsync (string authorization);

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetLastSampleRFIDBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody>> SamplerfidGetLastSampleRFIDBatchAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getLastSampleRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SamplerfidGetLastSampleRFIDByStreamResponseBody> SamplerfidGetLastSampleRFIDByStreamAsync (int? streamId, string authorization);

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Last Sample from Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetLastSampleRFIDByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody>> SamplerfidGetLastSampleRFIDByStreamAsyncWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples RFID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchResponseBody> SamplerfidGetSamplesRFIDBatchAsync (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null);

        /// <summary>
        /// getSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Get a Batch of New Samples RFID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody>> SamplerfidGetSamplesRFIDBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null);
        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchBySiteResponseBody> SamplerfidGetSamplesRFIDBatchBySiteAsync (int? siteId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchBySiteResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody>> SamplerfidGetSamplesRFIDBatchBySiteAsyncWithHttpInfo (int? siteId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchByStreamResponseBody> SamplerfidGetSamplesRFIDBatchByStreamAsync (int? streamId, int? sampleDate, string authorization);

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Get Batch of Recent Samples RFID of a Stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchByStreamResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody>> SamplerfidGetSamplesRFIDBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization);
        /// <summary>
        /// getSamplesRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples RFID from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of SamplerfidStoredSampleRFIDResponseCollection</returns>
        System.Threading.Tasks.Task<SamplerfidStoredSampleRFIDResponseCollection> SamplerfidGetSamplesRFIDByStreamAsync (int? streamId, string authorization, int? lastSampleId = null);

        /// <summary>
        /// getSamplesRFIDByStream samplerfid
        /// </summary>
        /// <remarks>
        /// Returns up to 100 samples RFID from the specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of ApiResponse (SamplerfidStoredSampleRFIDResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamplerfidStoredSampleRFIDResponseCollection>> SamplerfidGetSamplesRFIDByStreamAsyncWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null);
        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SamplerfidSetBackfillSamplesRFIDBatchAsync (int? sampleDate, string authorization, string agent = null);

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid
        /// </summary>
        /// <remarks>
        /// Reset the DateTime starting point for the next Samples RFID Batch
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SamplerfidSetBackfillSamplesRFIDBatchAsyncWithHttpInfo (int? sampleDate, string authorization, string agent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SamplerfidApi : ISamplerfidApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SamplerfidApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SamplerfidApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SamplerfidApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SamplerfidApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// ackSampleRFIDBatch samplerfid Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns></returns>
        public void SamplerfidAckSampleRFIDBatch (int? sampleId, string authorization, string agent = null)
        {
             SamplerfidAckSampleRFIDBatchWithHttpInfo(sampleId, authorization, agent);
        }

        /// <summary>
        /// ackSampleRFIDBatch samplerfid Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SamplerfidAckSampleRFIDBatchWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SamplerfidApi->SamplerfidAckSampleRFIDBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidAckSampleRFIDBatch");

            var localVarPath = "/sample/rfid/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sample_id", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidAckSampleRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// ackSampleRFIDBatch samplerfid Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SamplerfidAckSampleRFIDBatchAsync (int? sampleId, string authorization, string agent = null)
        {
             await SamplerfidAckSampleRFIDBatchAsyncWithHttpInfo(sampleId, authorization, agent);

        }

        /// <summary>
        /// ackSampleRFIDBatch samplerfid Notify which Sample RFID was the Last Sample RFID Received by the Client
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleId">The value to set in the last delivered sample RFID id internal field</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">User-Agent information, stored in the cloud to identify the applications that use the sampleRFIDs batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SamplerfidAckSampleRFIDBatchAsyncWithHttpInfo (int? sampleId, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleId' is set
            if (sampleId == null)
                throw new ApiException(400, "Missing required parameter 'sampleId' when calling SamplerfidApi->SamplerfidAckSampleRFIDBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidAckSampleRFIDBatch");

            var localVarPath = "/sample/rfid/batch/ack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sample_id", sampleId)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidAckSampleRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        public SamplerfidGetLastSampleRFIDBatchResponseBody SamplerfidGetLastSampleRFIDBatch (string authorization)
        {
             ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody> localVarResponse = SamplerfidGetLastSampleRFIDBatchWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        public ApiResponse< SamplerfidGetLastSampleRFIDBatchResponseBody > SamplerfidGetLastSampleRFIDBatchWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDBatch");

            var localVarPath = "/sample/rfid/batch/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetLastSampleRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetLastSampleRFIDBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetLastSampleRFIDBatchResponseBody)));
        }

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetLastSampleRFIDBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplerfidGetLastSampleRFIDBatchResponseBody> SamplerfidGetLastSampleRFIDBatchAsync (string authorization)
        {
             ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody> localVarResponse = await SamplerfidGetLastSampleRFIDBatchAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getLastSampleRFIDBatch samplerfid Get the Last Delivered Sample RFID of the Last Delivered Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetLastSampleRFIDBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody>> SamplerfidGetLastSampleRFIDBatchAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDBatch");

            var localVarPath = "/sample/rfid/batch/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetLastSampleRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetLastSampleRFIDBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetLastSampleRFIDBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetLastSampleRFIDBatchResponseBody)));
        }

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        public SamplerfidGetLastSampleRFIDByStreamResponseBody SamplerfidGetLastSampleRFIDByStream (int? streamId, string authorization)
        {
             ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody> localVarResponse = SamplerfidGetLastSampleRFIDByStreamWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        public ApiResponse< SamplerfidGetLastSampleRFIDByStreamResponseBody > SamplerfidGetLastSampleRFIDByStreamWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetLastSampleRFIDByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetLastSampleRFIDByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetLastSampleRFIDByStreamResponseBody)));
        }

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetLastSampleRFIDByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplerfidGetLastSampleRFIDByStreamResponseBody> SamplerfidGetLastSampleRFIDByStreamAsync (int? streamId, string authorization)
        {
             ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody> localVarResponse = await SamplerfidGetLastSampleRFIDByStreamAsyncWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getLastSampleRFIDByStream samplerfid Get Last Sample from Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose last sample should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetLastSampleRFIDByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody>> SamplerfidGetLastSampleRFIDByStreamAsyncWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetLastSampleRFIDByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetLastSampleRFIDByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetLastSampleRFIDByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetLastSampleRFIDByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetLastSampleRFIDByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatch samplerfid Get a Batch of New Samples RFID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        public SamplerfidGetSamplesRFIDBatchResponseBody SamplerfidGetSamplesRFIDBatch (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody> localVarResponse = SamplerfidGetSamplesRFIDBatchWithHttpInfo(authorization, enableAck, sampleId, backfillHours);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesRFIDBatch samplerfid Get a Batch of New Samples RFID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        public ApiResponse< SamplerfidGetSamplesRFIDBatchResponseBody > SamplerfidGetSamplesRFIDBatchWithHttpInfo (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatch");

            var localVarPath = "/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatch samplerfid Get a Batch of New Samples RFID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchResponseBody> SamplerfidGetSamplesRFIDBatchAsync (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody> localVarResponse = await SamplerfidGetSamplesRFIDBatchAsyncWithHttpInfo(authorization, enableAck, sampleId, backfillHours);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesRFIDBatch samplerfid Get a Batch of New Samples RFID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="enableAck">If set to false, then the internal last delivered sample RFID id value is set to the last sample RFID ID in the batch sent in response to this call. If set to true, then the internal last delivered sample RFID id remains untouched by this call. We recommend setting this parameter to &#39;true&#39; and calling ackSamplesRFIDBatch to update the last delivered sample RFID id field (optional, default to true)</param>
        /// <param name="sampleId">Specifies to send samples RFID with an ID number strictly higher than the sampleId. For example, if the sampleId value is 1234, the response could include samples RFID with IDs such as [1235, 1240, 1241] (optional)</param>
        /// <param name="backfillHours">Specifies to send samples RFID starting this many hours ago. For example, if the backfillHours value is 24, this is a request to provide all samples RFID of the past 24 hours (optional)</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody>> SamplerfidGetSamplesRFIDBatchAsyncWithHttpInfo (string authorization, bool? enableAck = null, int? sampleId = null, int? backfillHours = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatch");

            var localVarPath = "/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableAck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAck", enableAck)); // query parameter
            if (sampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleId", sampleId)); // query parameter
            if (backfillHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backfillHours", backfillHours)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid Get Batch of Recent Samples RFID of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        public SamplerfidGetSamplesRFIDBatchBySiteResponseBody SamplerfidGetSamplesRFIDBatchBySite (int? siteId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody> localVarResponse = SamplerfidGetSamplesRFIDBatchBySiteWithHttpInfo(siteId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid Get Batch of Recent Samples RFID of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        public ApiResponse< SamplerfidGetSamplesRFIDBatchBySiteResponseBody > SamplerfidGetSamplesRFIDBatchBySiteWithHttpInfo (int? siteId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");

            var localVarPath = "/site/{siteId}/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatchBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchBySiteResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchBySiteResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid Get Batch of Recent Samples RFID of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchBySiteResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchBySiteResponseBody> SamplerfidGetSamplesRFIDBatchBySiteAsync (int? siteId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody> localVarResponse = await SamplerfidGetSamplesRFIDBatchBySiteAsyncWithHttpInfo(siteId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesRFIDBatchBySite samplerfid Get Batch of Recent Samples RFID of a Site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchBySiteResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody>> SamplerfidGetSamplesRFIDBatchBySiteAsyncWithHttpInfo (int? siteId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchBySite");

            var localVarPath = "/site/{siteId}/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatchBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchBySiteResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchBySiteResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchBySiteResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid Get Batch of Recent Samples RFID of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        public SamplerfidGetSamplesRFIDBatchByStreamResponseBody SamplerfidGetSamplesRFIDBatchByStream (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody> localVarResponse = SamplerfidGetSamplesRFIDBatchByStreamWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid Get Batch of Recent Samples RFID of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        public ApiResponse< SamplerfidGetSamplesRFIDBatchByStreamResponseBody > SamplerfidGetSamplesRFIDBatchByStreamWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid Get Batch of Recent Samples RFID of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SamplerfidGetSamplesRFIDBatchByStreamResponseBody</returns>
        public async System.Threading.Tasks.Task<SamplerfidGetSamplesRFIDBatchByStreamResponseBody> SamplerfidGetSamplesRFIDBatchByStreamAsync (int? streamId, int? sampleDate, string authorization)
        {
             ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody> localVarResponse = await SamplerfidGetSamplesRFIDBatchByStreamAsyncWithHttpInfo(streamId, sampleDate, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesRFIDBatchByStream samplerfid Get Batch of Recent Samples RFID of a Stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="sampleDate">The sampling date and time of the oldest sample in the batch (Unix time, seconds since January 1, 1970 UTC.)</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SamplerfidGetSamplesRFIDBatchByStreamResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody>> SamplerfidGetSamplesRFIDBatchByStreamAsyncWithHttpInfo (int? streamId, int? sampleDate, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDBatchByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sampleDate", sampleDate)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDBatchByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidGetSamplesRFIDBatchByStreamResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidGetSamplesRFIDBatchByStreamResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidGetSamplesRFIDBatchByStreamResponseBody)));
        }

        /// <summary>
        /// getSamplesRFIDByStream samplerfid Returns up to 100 samples RFID from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>SamplerfidStoredSampleRFIDResponseCollection</returns>
        public SamplerfidStoredSampleRFIDResponseCollection SamplerfidGetSamplesRFIDByStream (int? streamId, string authorization, int? lastSampleId = null)
        {
             ApiResponse<SamplerfidStoredSampleRFIDResponseCollection> localVarResponse = SamplerfidGetSamplesRFIDByStreamWithHttpInfo(streamId, authorization, lastSampleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSamplesRFIDByStream samplerfid Returns up to 100 samples RFID from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>ApiResponse of SamplerfidStoredSampleRFIDResponseCollection</returns>
        public ApiResponse< SamplerfidStoredSampleRFIDResponseCollection > SamplerfidGetSamplesRFIDByStreamWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (lastSampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSampleId", lastSampleId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidStoredSampleRFIDResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidStoredSampleRFIDResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidStoredSampleRFIDResponseCollection)));
        }

        /// <summary>
        /// getSamplesRFIDByStream samplerfid Returns up to 100 samples RFID from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of SamplerfidStoredSampleRFIDResponseCollection</returns>
        public async System.Threading.Tasks.Task<SamplerfidStoredSampleRFIDResponseCollection> SamplerfidGetSamplesRFIDByStreamAsync (int? streamId, string authorization, int? lastSampleId = null)
        {
             ApiResponse<SamplerfidStoredSampleRFIDResponseCollection> localVarResponse = await SamplerfidGetSamplesRFIDByStreamAsyncWithHttpInfo(streamId, authorization, lastSampleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSamplesRFIDByStream samplerfid Returns up to 100 samples RFID from the specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="lastSampleId">ID of the oldest sample from which to start returning samples (optional)</param>
        /// <returns>Task of ApiResponse (SamplerfidStoredSampleRFIDResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamplerfidStoredSampleRFIDResponseCollection>> SamplerfidGetSamplesRFIDByStreamAsyncWithHttpInfo (int? streamId, string authorization, int? lastSampleId = null)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling SamplerfidApi->SamplerfidGetSamplesRFIDByStream");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidGetSamplesRFIDByStream");

            var localVarPath = "/stream/{streamId}/sample/rfid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (lastSampleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSampleId", lastSampleId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidGetSamplesRFIDByStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SamplerfidStoredSampleRFIDResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SamplerfidStoredSampleRFIDResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SamplerfidStoredSampleRFIDResponseCollection)));
        }

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid Reset the DateTime starting point for the next Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns></returns>
        public void SamplerfidSetBackfillSamplesRFIDBatch (int? sampleDate, string authorization, string agent = null)
        {
             SamplerfidSetBackfillSamplesRFIDBatchWithHttpInfo(sampleDate, authorization, agent);
        }

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid Reset the DateTime starting point for the next Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SamplerfidSetBackfillSamplesRFIDBatchWithHttpInfo (int? sampleDate, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidSetBackfillSamplesRFIDBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidSetBackfillSamplesRFIDBatch");

            var localVarPath = "/sample/rfid/batch/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sample_date", sampleDate)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidSetBackfillSamplesRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid Reset the DateTime starting point for the next Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SamplerfidSetBackfillSamplesRFIDBatchAsync (int? sampleDate, string authorization, string agent = null)
        {
             await SamplerfidSetBackfillSamplesRFIDBatchAsyncWithHttpInfo(sampleDate, authorization, agent);

        }

        /// <summary>
        /// setBackfillSamplesRFIDBatch samplerfid Reset the DateTime starting point for the next Samples RFID Batch
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sampleDate">The date and time to use for setting the last delivered sample id internal field (Unix time, seconds since January 1, 1970 UTC.). The API resets the internal last delivered sample id value to the id of the sample whose date and time is closest to the specified date and time</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="agent">ser-Agent information, stored in the cloud to identify the applications that use the samples batch APIs (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SamplerfidSetBackfillSamplesRFIDBatchAsyncWithHttpInfo (int? sampleDate, string authorization, string agent = null)
        {
            // verify the required parameter 'sampleDate' is set
            if (sampleDate == null)
                throw new ApiException(400, "Missing required parameter 'sampleDate' when calling SamplerfidApi->SamplerfidSetBackfillSamplesRFIDBatch");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SamplerfidApi->SamplerfidSetBackfillSamplesRFIDBatch");

            var localVarPath = "/sample/rfid/batch/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sampleDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sample_date", sampleDate)); // query parameter
            if (agent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "agent", agent)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SamplerfidSetBackfillSamplesRFIDBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
