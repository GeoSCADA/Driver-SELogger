/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getAllSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        SiteStoredSiteCustomAtrtributeValueResponseCollection SiteGetAllSiteCustomAttributeValues (string authorization);

        /// <summary>
        /// getAllSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetAllSiteCustomAttributeValuesWithHttpInfo (string authorization);
        /// <summary>
        /// getAllSiteCustomAttributesNames site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        SiteStoredSiteCustomAtrtributeNameResponseCollection SiteGetAllSiteCustomAttributesNames (string authorization);

        /// <summary>
        /// getAllSiteCustomAttributesNames site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection> SiteGetAllSiteCustomAttributesNamesWithHttpInfo (string authorization);
        /// <summary>
        /// getAllSites site
        /// </summary>
        /// <remarks>
        /// Get All Sites
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteResponseCollection</returns>
        SiteStoredSiteResponseCollection SiteGetAllSites (string authorization);

        /// <summary>
        /// getAllSites site
        /// </summary>
        /// <remarks>
        /// Get All Sites
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteResponseCollection</returns>
        ApiResponse<SiteStoredSiteResponseCollection> SiteGetAllSitesWithHttpInfo (string authorization);
        /// <summary>
        /// getSiteById site
        /// </summary>
        /// <remarks>
        /// Get Site by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteGetSiteByIDResponseBody</returns>
        SiteGetSiteByIDResponseBody SiteGetSiteById (int? siteId, string authorization);

        /// <summary>
        /// getSiteById site
        /// </summary>
        /// <remarks>
        /// Get Site by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteGetSiteByIDResponseBody</returns>
        ApiResponse<SiteGetSiteByIDResponseBody> SiteGetSiteByIdWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// getSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        SiteStoredSiteCustomAtrtributeValueResponseCollection SiteGetSiteCustomAttributeValues (int? siteId, string authorization);

        /// <summary>
        /// getSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetSiteCustomAttributeValuesWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// setSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Update Site Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns></returns>
        void SiteSetSiteCustomAttributeValues (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody);

        /// <summary>
        /// setSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Update Site Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SiteSetSiteCustomAttributeValuesWithHttpInfo (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getAllSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetAllSiteCustomAttributeValuesAsync (string authorization);

        /// <summary>
        /// getAllSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeValueResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>> SiteGetAllSiteCustomAttributeValuesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getAllSiteCustomAttributesNames site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeNameResponseCollection> SiteGetAllSiteCustomAttributesNamesAsync (string authorization);

        /// <summary>
        /// getAllSiteCustomAttributesNames site
        /// </summary>
        /// <remarks>
        /// Get All Sites&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeNameResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection>> SiteGetAllSiteCustomAttributesNamesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getAllSites site
        /// </summary>
        /// <remarks>
        /// Get All Sites
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteResponseCollection</returns>
        System.Threading.Tasks.Task<SiteStoredSiteResponseCollection> SiteGetAllSitesAsync (string authorization);

        /// <summary>
        /// getAllSites site
        /// </summary>
        /// <remarks>
        /// Get All Sites
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteResponseCollection>> SiteGetAllSitesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getSiteById site
        /// </summary>
        /// <remarks>
        /// Get Site by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteGetSiteByIDResponseBody</returns>
        System.Threading.Tasks.Task<SiteGetSiteByIDResponseBody> SiteGetSiteByIdAsync (int? siteId, string authorization);

        /// <summary>
        /// getSiteById site
        /// </summary>
        /// <remarks>
        /// Get Site by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteGetSiteByIDResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteGetSiteByIDResponseBody>> SiteGetSiteByIdAsyncWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// getSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetSiteCustomAttributeValuesAsync (int? siteId, string authorization);

        /// <summary>
        /// getSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified site
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeValueResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>> SiteGetSiteCustomAttributeValuesAsyncWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// setSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Update Site Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SiteSetSiteCustomAttributeValuesAsync (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody);

        /// <summary>
        /// setSiteCustomAttributeValues site
        /// </summary>
        /// <remarks>
        /// Update Site Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SiteSetSiteCustomAttributeValuesAsyncWithHttpInfo (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SiteApi : ISiteApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SiteApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getAllSiteCustomAttributeValues site Get All Sites&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public SiteStoredSiteCustomAtrtributeValueResponseCollection SiteGetAllSiteCustomAttributeValues (string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> localVarResponse = SiteGetAllSiteCustomAttributeValuesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllSiteCustomAttributeValues site Get All Sites&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public ApiResponse< SiteStoredSiteCustomAtrtributeValueResponseCollection > SiteGetAllSiteCustomAttributeValuesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSiteCustomAttributeValues");

            var localVarPath = "/site/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getAllSiteCustomAttributeValues site Get All Sites&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public async System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetAllSiteCustomAttributeValuesAsync (string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> localVarResponse = await SiteGetAllSiteCustomAttributeValuesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllSiteCustomAttributeValues site Get All Sites&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeValueResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>> SiteGetAllSiteCustomAttributeValuesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSiteCustomAttributeValues");

            var localVarPath = "/site/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getAllSiteCustomAttributesNames site Get All Sites&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        public SiteStoredSiteCustomAtrtributeNameResponseCollection SiteGetAllSiteCustomAttributesNames (string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection> localVarResponse = SiteGetAllSiteCustomAttributesNamesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllSiteCustomAttributesNames site Get All Sites&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        public ApiResponse< SiteStoredSiteCustomAtrtributeNameResponseCollection > SiteGetAllSiteCustomAttributesNamesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSiteCustomAttributesNames");

            var localVarPath = "/site/customAttributes/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSiteCustomAttributesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeNameResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeNameResponseCollection)));
        }

        /// <summary>
        /// getAllSiteCustomAttributesNames site Get All Sites&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeNameResponseCollection</returns>
        public async System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeNameResponseCollection> SiteGetAllSiteCustomAttributesNamesAsync (string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection> localVarResponse = await SiteGetAllSiteCustomAttributesNamesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllSiteCustomAttributesNames site Get All Sites&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeNameResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection>> SiteGetAllSiteCustomAttributesNamesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSiteCustomAttributesNames");

            var localVarPath = "/site/customAttributes/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSiteCustomAttributesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeNameResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeNameResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeNameResponseCollection)));
        }

        /// <summary>
        /// getAllSites site Get All Sites
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteResponseCollection</returns>
        public SiteStoredSiteResponseCollection SiteGetAllSites (string authorization)
        {
             ApiResponse<SiteStoredSiteResponseCollection> localVarResponse = SiteGetAllSitesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllSites site Get All Sites
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteResponseCollection</returns>
        public ApiResponse< SiteStoredSiteResponseCollection > SiteGetAllSitesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSites");

            var localVarPath = "/site";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteResponseCollection)));
        }

        /// <summary>
        /// getAllSites site Get All Sites
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteResponseCollection</returns>
        public async System.Threading.Tasks.Task<SiteStoredSiteResponseCollection> SiteGetAllSitesAsync (string authorization)
        {
             ApiResponse<SiteStoredSiteResponseCollection> localVarResponse = await SiteGetAllSitesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllSites site Get All Sites
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteResponseCollection>> SiteGetAllSitesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetAllSites");

            var localVarPath = "/site";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetAllSites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteResponseCollection)));
        }

        /// <summary>
        /// getSiteById site Get Site by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteGetSiteByIDResponseBody</returns>
        public SiteGetSiteByIDResponseBody SiteGetSiteById (int? siteId, string authorization)
        {
             ApiResponse<SiteGetSiteByIDResponseBody> localVarResponse = SiteGetSiteByIdWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSiteById site Get Site by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteGetSiteByIDResponseBody</returns>
        public ApiResponse< SiteGetSiteByIDResponseBody > SiteGetSiteByIdWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SiteApi->SiteGetSiteById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetSiteById");

            var localVarPath = "/site/{siteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetSiteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteGetSiteByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteGetSiteByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteGetSiteByIDResponseBody)));
        }

        /// <summary>
        /// getSiteById site Get Site by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteGetSiteByIDResponseBody</returns>
        public async System.Threading.Tasks.Task<SiteGetSiteByIDResponseBody> SiteGetSiteByIdAsync (int? siteId, string authorization)
        {
             ApiResponse<SiteGetSiteByIDResponseBody> localVarResponse = await SiteGetSiteByIdAsyncWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSiteById site Get Site by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteGetSiteByIDResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteGetSiteByIDResponseBody>> SiteGetSiteByIdAsyncWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SiteApi->SiteGetSiteById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetSiteById");

            var localVarPath = "/site/{siteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetSiteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteGetSiteByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteGetSiteByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteGetSiteByIDResponseBody)));
        }

        /// <summary>
        /// getSiteCustomAttributeValues site Returns information about the custom attributes of a specified site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public SiteStoredSiteCustomAtrtributeValueResponseCollection SiteGetSiteCustomAttributeValues (int? siteId, string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> localVarResponse = SiteGetSiteCustomAttributeValuesWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSiteCustomAttributeValues site Returns information about the custom attributes of a specified site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public ApiResponse< SiteStoredSiteCustomAtrtributeValueResponseCollection > SiteGetSiteCustomAttributeValuesWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SiteApi->SiteGetSiteCustomAttributeValues");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetSiteCustomAttributeValues");

            var localVarPath = "/site/{siteId}/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getSiteCustomAttributeValues site Returns information about the custom attributes of a specified site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of SiteStoredSiteCustomAtrtributeValueResponseCollection</returns>
        public async System.Threading.Tasks.Task<SiteStoredSiteCustomAtrtributeValueResponseCollection> SiteGetSiteCustomAttributeValuesAsync (int? siteId, string authorization)
        {
             ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection> localVarResponse = await SiteGetSiteCustomAttributeValuesAsyncWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSiteCustomAttributeValues site Returns information about the custom attributes of a specified site
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (SiteStoredSiteCustomAtrtributeValueResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>> SiteGetSiteCustomAttributeValuesAsyncWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling SiteApi->SiteGetSiteCustomAttributeValues");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteGetSiteCustomAttributeValues");

            var localVarPath = "/site/{siteId}/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteGetSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteStoredSiteCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SiteStoredSiteCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteStoredSiteCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// setSiteCustomAttributeValues site Update Site Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns></returns>
        public void SiteSetSiteCustomAttributeValues (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody)
        {
             SiteSetSiteCustomAttributeValuesWithHttpInfo(authorization, setSiteCustomAttributeValuesRequestBody);
        }

        /// <summary>
        /// setSiteCustomAttributeValues site Update Site Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SiteSetSiteCustomAttributeValuesWithHttpInfo (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteSetSiteCustomAttributeValues");
            // verify the required parameter 'setSiteCustomAttributeValuesRequestBody' is set
            if (setSiteCustomAttributeValuesRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'setSiteCustomAttributeValuesRequestBody' when calling SiteApi->SiteSetSiteCustomAttributeValues");

            var localVarPath = "/site/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (setSiteCustomAttributeValuesRequestBody != null && setSiteCustomAttributeValuesRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setSiteCustomAttributeValuesRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setSiteCustomAttributeValuesRequestBody; // byte array
            }

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteSetSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setSiteCustomAttributeValues site Update Site Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SiteSetSiteCustomAttributeValuesAsync (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody)
        {
             await SiteSetSiteCustomAttributeValuesAsyncWithHttpInfo(authorization, setSiteCustomAttributeValuesRequestBody);

        }

        /// <summary>
        /// setSiteCustomAttributeValues site Update Site Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setSiteCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SiteSetSiteCustomAttributeValuesAsyncWithHttpInfo (string authorization, SiteSetSiteCustomAttributeValuesRequestBody setSiteCustomAttributeValuesRequestBody)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SiteApi->SiteSetSiteCustomAttributeValues");
            // verify the required parameter 'setSiteCustomAttributeValuesRequestBody' is set
            if (setSiteCustomAttributeValuesRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'setSiteCustomAttributeValuesRequestBody' when calling SiteApi->SiteSetSiteCustomAttributeValues");

            var localVarPath = "/site/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (setSiteCustomAttributeValuesRequestBody != null && setSiteCustomAttributeValuesRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setSiteCustomAttributeValuesRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setSiteCustomAttributeValuesRequestBody; // byte array
            }

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiteSetSiteCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
