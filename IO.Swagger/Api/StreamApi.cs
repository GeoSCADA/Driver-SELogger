/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getAllStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetAllStreamCustomAttributeValues (string authorization);

        /// <summary>
        /// getAllStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetAllStreamCustomAttributeValuesWithHttpInfo (string authorization);
        /// <summary>
        /// getAllStreamCustomAttributesNames stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        StreamStoredStreamCustomAtrtributeNameResponseCollection StreamGetAllStreamCustomAttributesNames (string authorization);

        /// <summary>
        /// getAllStreamCustomAttributesNames stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection> StreamGetAllStreamCustomAttributesNamesWithHttpInfo (string authorization);
        /// <summary>
        /// getAllStreams stream
        /// </summary>
        /// <remarks>
        /// Get All Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamResponseCollection</returns>
        StreamStoredStreamResponseCollection StreamGetAllStreams (string authorization);

        /// <summary>
        /// getAllStreams stream
        /// </summary>
        /// <remarks>
        /// Get All Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamResponseCollection</returns>
        ApiResponse<StreamStoredStreamResponseCollection> StreamGetAllStreamsWithHttpInfo (string authorization);
        /// <summary>
        /// getStreamById stream
        /// </summary>
        /// <remarks>
        /// Get Stream by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamGetStreamByIDResponseBody</returns>
        StreamGetStreamByIDResponseBody StreamGetStreamById (int? streamId, string authorization);

        /// <summary>
        /// getStreamById stream
        /// </summary>
        /// <remarks>
        /// Get Stream by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamGetStreamByIDResponseBody</returns>
        ApiResponse<StreamGetStreamByIDResponseBody> StreamGetStreamByIdWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetStreamCustomAttributeValues (int? streamId, string authorization);

        /// <summary>
        /// getStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream
        /// </summary>
        /// <remarks>
        /// Get Custom Attributes of a Site&#39;s Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetStreamCustomAttributeValuesBySite (int? siteId, string authorization);

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream
        /// </summary>
        /// <remarks>
        /// Get Custom Attributes of a Site&#39;s Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesBySiteWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// getStreamsBySite stream
        /// </summary>
        /// <remarks>
        /// Get All Streams by Site (incl. gps)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamResponseCollection</returns>
        StreamStoredStreamResponseCollection StreamGetStreamsBySite (int? siteId, string authorization);

        /// <summary>
        /// getStreamsBySite stream
        /// </summary>
        /// <remarks>
        /// Get All Streams by Site (incl. gps)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamResponseCollection</returns>
        ApiResponse<StreamStoredStreamResponseCollection> StreamGetStreamsBySiteWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// setStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Update Stream Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns></returns>
        void StreamSetStreamCustomAttributeValues (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody);

        /// <summary>
        /// setStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Update Stream Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamSetStreamCustomAttributeValuesWithHttpInfo (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getAllStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetAllStreamCustomAttributeValuesAsync (string authorization);

        /// <summary>
        /// getAllStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attribute Names and Values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetAllStreamCustomAttributeValuesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getAllStreamCustomAttributesNames stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeNameResponseCollection> StreamGetAllStreamCustomAttributesNamesAsync (string authorization);

        /// <summary>
        /// getAllStreamCustomAttributesNames stream
        /// </summary>
        /// <remarks>
        /// Get All Streams&#39; Custom Attributes Names
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeNameResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection>> StreamGetAllStreamCustomAttributesNamesAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getAllStreams stream
        /// </summary>
        /// <remarks>
        /// Get All Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamResponseCollection> StreamGetAllStreamsAsync (string authorization);

        /// <summary>
        /// getAllStreams stream
        /// </summary>
        /// <remarks>
        /// Get All Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamResponseCollection>> StreamGetAllStreamsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// getStreamById stream
        /// </summary>
        /// <remarks>
        /// Get Stream by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamGetStreamByIDResponseBody</returns>
        System.Threading.Tasks.Task<StreamGetStreamByIDResponseBody> StreamGetStreamByIdAsync (int? streamId, string authorization);

        /// <summary>
        /// getStreamById stream
        /// </summary>
        /// <remarks>
        /// Get Stream by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamGetStreamByIDResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamGetStreamByIDResponseBody>> StreamGetStreamByIdAsyncWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesAsync (int? streamId, string authorization);

        /// <summary>
        /// getStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Returns information about the custom attributes of a specified stream
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetStreamCustomAttributeValuesAsyncWithHttpInfo (int? streamId, string authorization);
        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream
        /// </summary>
        /// <remarks>
        /// Get Custom Attributes of a Site&#39;s Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesBySiteAsync (int? siteId, string authorization);

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream
        /// </summary>
        /// <remarks>
        /// Get Custom Attributes of a Site&#39;s Streams
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetStreamCustomAttributeValuesBySiteAsyncWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// getStreamsBySite stream
        /// </summary>
        /// <remarks>
        /// Get All Streams by Site (incl. gps)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamResponseCollection</returns>
        System.Threading.Tasks.Task<StreamStoredStreamResponseCollection> StreamGetStreamsBySiteAsync (int? siteId, string authorization);

        /// <summary>
        /// getStreamsBySite stream
        /// </summary>
        /// <remarks>
        /// Get All Streams by Site (incl. gps)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamResponseCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamResponseCollection>> StreamGetStreamsBySiteAsyncWithHttpInfo (int? siteId, string authorization);
        /// <summary>
        /// setStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Update Stream Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamSetStreamCustomAttributeValuesAsync (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody);

        /// <summary>
        /// setStreamCustomAttributeValues stream
        /// </summary>
        /// <remarks>
        /// Update Stream Custom Attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamSetStreamCustomAttributeValuesAsyncWithHttpInfo (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamApi : IStreamApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getAllStreamCustomAttributeValues stream Get All Streams&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetAllStreamCustomAttributeValues (string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = StreamGetAllStreamCustomAttributeValuesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllStreamCustomAttributeValues stream Get All Streams&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public ApiResponse< StreamStoredStreamCustomAtrtributeValueResponseCollection > StreamGetAllStreamCustomAttributeValuesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreamCustomAttributeValues");

            var localVarPath = "/stream/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getAllStreamCustomAttributeValues stream Get All Streams&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetAllStreamCustomAttributeValuesAsync (string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = await StreamGetAllStreamCustomAttributeValuesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllStreamCustomAttributeValues stream Get All Streams&#39; Custom Attribute Names and Values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetAllStreamCustomAttributeValuesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreamCustomAttributeValues");

            var localVarPath = "/stream/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getAllStreamCustomAttributesNames stream Get All Streams&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        public StreamStoredStreamCustomAtrtributeNameResponseCollection StreamGetAllStreamCustomAttributesNames (string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection> localVarResponse = StreamGetAllStreamCustomAttributesNamesWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllStreamCustomAttributesNames stream Get All Streams&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        public ApiResponse< StreamStoredStreamCustomAtrtributeNameResponseCollection > StreamGetAllStreamCustomAttributesNamesWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreamCustomAttributesNames");

            var localVarPath = "/stream/customAttributes/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreamCustomAttributesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeNameResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeNameResponseCollection)));
        }

        /// <summary>
        /// getAllStreamCustomAttributesNames stream Get All Streams&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeNameResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeNameResponseCollection> StreamGetAllStreamCustomAttributesNamesAsync (string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection> localVarResponse = await StreamGetAllStreamCustomAttributesNamesAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllStreamCustomAttributesNames stream Get All Streams&#39; Custom Attributes Names
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeNameResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection>> StreamGetAllStreamCustomAttributesNamesAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreamCustomAttributesNames");

            var localVarPath = "/stream/customAttributes/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreamCustomAttributesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeNameResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeNameResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeNameResponseCollection)));
        }

        /// <summary>
        /// getAllStreams stream Get All Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamResponseCollection</returns>
        public StreamStoredStreamResponseCollection StreamGetAllStreams (string authorization)
        {
             ApiResponse<StreamStoredStreamResponseCollection> localVarResponse = StreamGetAllStreamsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllStreams stream Get All Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamResponseCollection</returns>
        public ApiResponse< StreamStoredStreamResponseCollection > StreamGetAllStreamsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreams");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamResponseCollection)));
        }

        /// <summary>
        /// getAllStreams stream Get All Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamResponseCollection> StreamGetAllStreamsAsync (string authorization)
        {
             ApiResponse<StreamStoredStreamResponseCollection> localVarResponse = await StreamGetAllStreamsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllStreams stream Get All Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamResponseCollection>> StreamGetAllStreamsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetAllStreams");

            var localVarPath = "/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetAllStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamResponseCollection)));
        }

        /// <summary>
        /// getStreamById stream Get Stream by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamGetStreamByIDResponseBody</returns>
        public StreamGetStreamByIDResponseBody StreamGetStreamById (int? streamId, string authorization)
        {
             ApiResponse<StreamGetStreamByIDResponseBody> localVarResponse = StreamGetStreamByIdWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getStreamById stream Get Stream by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamGetStreamByIDResponseBody</returns>
        public ApiResponse< StreamGetStreamByIDResponseBody > StreamGetStreamByIdWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamApi->StreamGetStreamById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamById");

            var localVarPath = "/stream/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamGetStreamByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamGetStreamByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamGetStreamByIDResponseBody)));
        }

        /// <summary>
        /// getStreamById stream Get Stream by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamGetStreamByIDResponseBody</returns>
        public async System.Threading.Tasks.Task<StreamGetStreamByIDResponseBody> StreamGetStreamByIdAsync (int? streamId, string authorization)
        {
             ApiResponse<StreamGetStreamByIDResponseBody> localVarResponse = await StreamGetStreamByIdAsyncWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getStreamById stream Get Stream by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose recent samples should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamGetStreamByIDResponseBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamGetStreamByIDResponseBody>> StreamGetStreamByIdAsyncWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamApi->StreamGetStreamById");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamById");

            var localVarPath = "/stream/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamGetStreamByIDResponseBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamGetStreamByIDResponseBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamGetStreamByIDResponseBody)));
        }

        /// <summary>
        /// getStreamCustomAttributeValues stream Returns information about the custom attributes of a specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetStreamCustomAttributeValues (int? streamId, string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = StreamGetStreamCustomAttributeValuesWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getStreamCustomAttributeValues stream Returns information about the custom attributes of a specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public ApiResponse< StreamStoredStreamCustomAtrtributeValueResponseCollection > StreamGetStreamCustomAttributeValuesWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamApi->StreamGetStreamCustomAttributeValues");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamCustomAttributeValues");

            var localVarPath = "/stream/{streamId}/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getStreamCustomAttributeValues stream Returns information about the custom attributes of a specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesAsync (int? streamId, string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = await StreamGetStreamCustomAttributeValuesAsyncWithHttpInfo(streamId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getStreamCustomAttributeValues stream Returns information about the custom attributes of a specified stream
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream whose custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetStreamCustomAttributeValuesAsyncWithHttpInfo (int? streamId, string authorization)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamApi->StreamGetStreamCustomAttributeValues");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamCustomAttributeValues");

            var localVarPath = "/stream/{streamId}/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream Get Custom Attributes of a Site&#39;s Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public StreamStoredStreamCustomAtrtributeValueResponseCollection StreamGetStreamCustomAttributeValuesBySite (int? siteId, string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = StreamGetStreamCustomAttributeValuesBySiteWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream Get Custom Attributes of a Site&#39;s Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public ApiResponse< StreamStoredStreamCustomAtrtributeValueResponseCollection > StreamGetStreamCustomAttributeValuesBySiteWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling StreamApi->StreamGetStreamCustomAttributeValuesBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamCustomAttributeValuesBySite");

            var localVarPath = "/site/{siteId}/streams/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamCustomAttributeValuesBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream Get Custom Attributes of a Site&#39;s Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamCustomAtrtributeValueResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamCustomAtrtributeValueResponseCollection> StreamGetStreamCustomAttributeValuesBySiteAsync (int? siteId, string authorization)
        {
             ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection> localVarResponse = await StreamGetStreamCustomAttributeValuesBySiteAsyncWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getStreamCustomAttributeValuesBySite stream Get Custom Attributes of a Site&#39;s Streams
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose streams&#39; custom attributes should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamCustomAtrtributeValueResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>> StreamGetStreamCustomAttributeValuesBySiteAsyncWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling StreamApi->StreamGetStreamCustomAttributeValuesBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamCustomAttributeValuesBySite");

            var localVarPath = "/site/{siteId}/streams/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamCustomAttributeValuesBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamCustomAtrtributeValueResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamCustomAtrtributeValueResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamCustomAtrtributeValueResponseCollection)));
        }

        /// <summary>
        /// getStreamsBySite stream Get All Streams by Site (incl. gps)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>StreamStoredStreamResponseCollection</returns>
        public StreamStoredStreamResponseCollection StreamGetStreamsBySite (int? siteId, string authorization)
        {
             ApiResponse<StreamStoredStreamResponseCollection> localVarResponse = StreamGetStreamsBySiteWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getStreamsBySite stream Get All Streams by Site (incl. gps)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>ApiResponse of StreamStoredStreamResponseCollection</returns>
        public ApiResponse< StreamStoredStreamResponseCollection > StreamGetStreamsBySiteWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling StreamApi->StreamGetStreamsBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamsBySite");

            var localVarPath = "/site/{siteId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamsBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamResponseCollection)));
        }

        /// <summary>
        /// getStreamsBySite stream Get All Streams by Site (incl. gps)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of StreamStoredStreamResponseCollection</returns>
        public async System.Threading.Tasks.Task<StreamStoredStreamResponseCollection> StreamGetStreamsBySiteAsync (int? siteId, string authorization)
        {
             ApiResponse<StreamStoredStreamResponseCollection> localVarResponse = await StreamGetStreamsBySiteAsyncWithHttpInfo(siteId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getStreamsBySite stream Get All Streams by Site (incl. gps)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">ID of the site whose devices should be returned</param>
        /// <param name="authorization">JWT used for authentication</param>
        /// <returns>Task of ApiResponse (StreamStoredStreamResponseCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamStoredStreamResponseCollection>> StreamGetStreamsBySiteAsyncWithHttpInfo (int? siteId, string authorization)
        {
            // verify the required parameter 'siteId' is set
            if (siteId == null)
                throw new ApiException(400, "Missing required parameter 'siteId' when calling StreamApi->StreamGetStreamsBySite");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamGetStreamsBySite");

            var localVarPath = "/site/{siteId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (siteId != null) localVarPathParams.Add("siteId", this.Configuration.ApiClient.ParameterToString(siteId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamGetStreamsBySite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamStoredStreamResponseCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamStoredStreamResponseCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamStoredStreamResponseCollection)));
        }

        /// <summary>
        /// setStreamCustomAttributeValues stream Update Stream Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns></returns>
        public void StreamSetStreamCustomAttributeValues (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody)
        {
             StreamSetStreamCustomAttributeValuesWithHttpInfo(authorization, setStreamCustomAttributeValuesRequestBody);
        }

        /// <summary>
        /// setStreamCustomAttributeValues stream Update Stream Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamSetStreamCustomAttributeValuesWithHttpInfo (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamSetStreamCustomAttributeValues");
            // verify the required parameter 'setStreamCustomAttributeValuesRequestBody' is set
            if (setStreamCustomAttributeValuesRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'setStreamCustomAttributeValuesRequestBody' when calling StreamApi->StreamSetStreamCustomAttributeValues");

            var localVarPath = "/stream/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (setStreamCustomAttributeValuesRequestBody != null && setStreamCustomAttributeValuesRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setStreamCustomAttributeValuesRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setStreamCustomAttributeValuesRequestBody; // byte array
            }

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamSetStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// setStreamCustomAttributeValues stream Update Stream Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamSetStreamCustomAttributeValuesAsync (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody)
        {
             await StreamSetStreamCustomAttributeValuesAsyncWithHttpInfo(authorization, setStreamCustomAttributeValuesRequestBody);

        }

        /// <summary>
        /// setStreamCustomAttributeValues stream Update Stream Custom Attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">JWT used for authentication</param>
        /// <param name="setStreamCustomAttributeValuesRequestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamSetStreamCustomAttributeValuesAsyncWithHttpInfo (string authorization, StreamSetStreamCustomAttributeValuesRequestBody setStreamCustomAttributeValuesRequestBody)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling StreamApi->StreamSetStreamCustomAttributeValues");
            // verify the required parameter 'setStreamCustomAttributeValuesRequestBody' is set
            if (setStreamCustomAttributeValuesRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'setStreamCustomAttributeValuesRequestBody' when calling StreamApi->StreamSetStreamCustomAttributeValues");

            var localVarPath = "/stream/customAttributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (setStreamCustomAttributeValuesRequestBody != null && setStreamCustomAttributeValuesRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setStreamCustomAttributeValuesRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setStreamCustomAttributeValuesRequestBody; // byte array
            }

            // authentication (jwt_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamSetStreamCustomAttributeValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
