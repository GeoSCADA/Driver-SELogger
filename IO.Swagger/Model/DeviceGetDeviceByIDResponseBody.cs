/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetDeviceByIdResponseBody result type (default view)
    /// </summary>
    [DataContract]
    public partial class DeviceGetDeviceByIDResponseBody :  IEquatable<DeviceGetDeviceByIDResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceGetDeviceByIDResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceGetDeviceByIDResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceGetDeviceByIDResponseBody" /> class.
        /// </summary>
        /// <param name="akid">Device HW ID (required).</param>
        /// <param name="displayName">Device name (required).</param>
        /// <param name="firmwareVersion">Firmware version (required).</param>
        /// <param name="iccid">Cellular ICCID (required).</param>
        /// <param name="iccid2">Cellular ICCID (required).</param>
        /// <param name="id">ID is the unique id of the device. (required).</param>
        /// <param name="meid">Cellular ICCID (required).</param>
        /// <param name="modelNumber">Model number (required).</param>
        /// <param name="serialNumber">Serial number (required).</param>
        /// <param name="siteDisplayName">Site name (required).</param>
        /// <param name="siteId">Site ID of device (required).</param>
        public DeviceGetDeviceByIDResponseBody(string akid = default(string), string displayName = default(string), string firmwareVersion = default(string), string iccid = default(string), string iccid2 = default(string), long? id = default(long?), string meid = default(string), string modelNumber = default(string), string serialNumber = default(string), string siteDisplayName = default(string), int? siteId = default(int?))
        {
            // to ensure "akid" is required (not null)
            if (akid == null)
            {
                throw new InvalidDataException("akid is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.Akid = akid;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "firmwareVersion" is required (not null)
            if (firmwareVersion == null)
            {
                throw new InvalidDataException("firmwareVersion is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.FirmwareVersion = firmwareVersion;
            }
            // to ensure "iccid" is required (not null)
            if (iccid == null)
            {
                throw new InvalidDataException("iccid is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.Iccid = iccid;
            }
            // to ensure "iccid2" is required (not null)
            if (iccid2 == null)
            {
                throw new InvalidDataException("iccid2 is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.Iccid2 = iccid2;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "meid" is required (not null)
            if (meid == null)
            {
                throw new InvalidDataException("meid is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.Meid = meid;
            }
            // to ensure "modelNumber" is required (not null)
            if (modelNumber == null)
            {
                throw new InvalidDataException("modelNumber is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.ModelNumber = modelNumber;
            }
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }
            // to ensure "siteDisplayName" is required (not null)
            if (siteDisplayName == null)
            {
                throw new InvalidDataException("siteDisplayName is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.SiteDisplayName = siteDisplayName;
            }
            // to ensure "siteId" is required (not null)
            if (siteId == null)
            {
                throw new InvalidDataException("siteId is a required property for DeviceGetDeviceByIDResponseBody and cannot be null");
            }
            else
            {
                this.SiteId = siteId;
            }
        }
        
        /// <summary>
        /// Device HW ID
        /// </summary>
        /// <value>Device HW ID</value>
        [DataMember(Name="akid", EmitDefaultValue=false)]
        public string Akid { get; set; }

        /// <summary>
        /// Device name
        /// </summary>
        /// <value>Device name</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Firmware version
        /// </summary>
        /// <value>Firmware version</value>
        [DataMember(Name="firmware_version", EmitDefaultValue=false)]
        public string FirmwareVersion { get; set; }

        /// <summary>
        /// Cellular ICCID
        /// </summary>
        /// <value>Cellular ICCID</value>
        [DataMember(Name="iccid", EmitDefaultValue=false)]
        public string Iccid { get; set; }

        /// <summary>
        /// Cellular ICCID
        /// </summary>
        /// <value>Cellular ICCID</value>
        [DataMember(Name="iccid2", EmitDefaultValue=false)]
        public string Iccid2 { get; set; }

        /// <summary>
        /// ID is the unique id of the device.
        /// </summary>
        /// <value>ID is the unique id of the device.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Cellular ICCID
        /// </summary>
        /// <value>Cellular ICCID</value>
        [DataMember(Name="meid", EmitDefaultValue=false)]
        public string Meid { get; set; }

        /// <summary>
        /// Model number
        /// </summary>
        /// <value>Model number</value>
        [DataMember(Name="model_number", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Serial number
        /// </summary>
        /// <value>Serial number</value>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Site name
        /// </summary>
        /// <value>Site name</value>
        [DataMember(Name="site_display_name", EmitDefaultValue=false)]
        public string SiteDisplayName { get; set; }

        /// <summary>
        /// Site ID of device
        /// </summary>
        /// <value>Site ID of device</value>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public int? SiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceGetDeviceByIDResponseBody {\n");
            sb.Append("  Akid: ").Append(Akid).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Iccid: ").Append(Iccid).Append("\n");
            sb.Append("  Iccid2: ").Append(Iccid2).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Meid: ").Append(Meid).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SiteDisplayName: ").Append(SiteDisplayName).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceGetDeviceByIDResponseBody);
        }

        /// <summary>
        /// Returns true if DeviceGetDeviceByIDResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceGetDeviceByIDResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceGetDeviceByIDResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Akid == input.Akid ||
                    (this.Akid != null &&
                    this.Akid.Equals(input.Akid))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FirmwareVersion == input.FirmwareVersion ||
                    (this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(input.FirmwareVersion))
                ) && 
                (
                    this.Iccid == input.Iccid ||
                    (this.Iccid != null &&
                    this.Iccid.Equals(input.Iccid))
                ) && 
                (
                    this.Iccid2 == input.Iccid2 ||
                    (this.Iccid2 != null &&
                    this.Iccid2.Equals(input.Iccid2))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Meid == input.Meid ||
                    (this.Meid != null &&
                    this.Meid.Equals(input.Meid))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.SiteDisplayName == input.SiteDisplayName ||
                    (this.SiteDisplayName != null &&
                    this.SiteDisplayName.Equals(input.SiteDisplayName))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Akid != null)
                    hashCode = hashCode * 59 + this.Akid.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FirmwareVersion != null)
                    hashCode = hashCode * 59 + this.FirmwareVersion.GetHashCode();
                if (this.Iccid != null)
                    hashCode = hashCode * 59 + this.Iccid.GetHashCode();
                if (this.Iccid2 != null)
                    hashCode = hashCode * 59 + this.Iccid2.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Meid != null)
                    hashCode = hashCode * 59 + this.Meid.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.SiteDisplayName != null)
                    hashCode = hashCode * 59 + this.SiteDisplayName.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Akid (string) maxLength
            if(this.Akid != null && this.Akid.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Akid, length must be less than 50.", new [] { "Akid" });
            }

            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // FirmwareVersion (string) maxLength
            if(this.FirmwareVersion != null && this.FirmwareVersion.Length > 90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirmwareVersion, length must be less than 90.", new [] { "FirmwareVersion" });
            }

            // Iccid (string) maxLength
            if(this.Iccid != null && this.Iccid.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iccid, length must be less than 30.", new [] { "Iccid" });
            }

            // Iccid2 (string) maxLength
            if(this.Iccid2 != null && this.Iccid2.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iccid2, length must be less than 30.", new [] { "Iccid2" });
            }

            // Meid (string) maxLength
            if(this.Meid != null && this.Meid.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Meid, length must be less than 15.", new [] { "Meid" });
            }

            // ModelNumber (string) maxLength
            if(this.ModelNumber != null && this.ModelNumber.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelNumber, length must be less than 2048.", new [] { "ModelNumber" });
            }

            // SerialNumber (string) maxLength
            if(this.SerialNumber != null && this.SerialNumber.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SerialNumber, length must be less than 256.", new [] { "SerialNumber" });
            }

            // SiteDisplayName (string) maxLength
            if(this.SiteDisplayName != null && this.SiteDisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiteDisplayName, length must be less than 256.", new [] { "SiteDisplayName" });
            }

            // SiteId (int?) minimum
            if(this.SiteId < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiteId, must be a value greater than or equal to 1.", new [] { "SiteId" });
            }

            yield break;
        }
    }

}
