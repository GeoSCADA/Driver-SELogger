/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GPSResponseBody
    /// </summary>
    [DataContract]
    public partial class GPSResponseBody :  IEquatable<GPSResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GPSResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GPSResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GPSResponseBody" /> class.
        /// </summary>
        /// <param name="altitude">Altitude (required).</param>
        /// <param name="date">Date of sample (required).</param>
        /// <param name="dilutionOfPrecision">Dilution of precision (required).</param>
        /// <param name="latitude">Latitude (required).</param>
        /// <param name="longitude">Longitude (required).</param>
        /// <param name="numberOfSatellites">Number of satellites (required).</param>
        public GPSResponseBody(float? altitude = default(float?), DateTime? date = default(DateTime?), float? dilutionOfPrecision = default(float?), decimal? latitude = default(decimal?), decimal? longitude = default(decimal?), int? numberOfSatellites = default(int?))
        {
            // to ensure "altitude" is required (not null)
            if (altitude == null)
            {
                throw new InvalidDataException("altitude is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.Altitude = altitude;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "dilutionOfPrecision" is required (not null)
            if (dilutionOfPrecision == null)
            {
                throw new InvalidDataException("dilutionOfPrecision is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.DilutionOfPrecision = dilutionOfPrecision;
            }
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new InvalidDataException("latitude is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.Latitude = latitude;
            }
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new InvalidDataException("longitude is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.Longitude = longitude;
            }
            // to ensure "numberOfSatellites" is required (not null)
            if (numberOfSatellites == null)
            {
                throw new InvalidDataException("numberOfSatellites is a required property for GPSResponseBody and cannot be null");
            }
            else
            {
                this.NumberOfSatellites = numberOfSatellites;
            }
        }
        
        /// <summary>
        /// Altitude
        /// </summary>
        /// <value>Altitude</value>
        [DataMember(Name="altitude", EmitDefaultValue=false)]
        public float? Altitude { get; set; }

        /// <summary>
        /// Date of sample
        /// </summary>
        /// <value>Date of sample</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Dilution of precision
        /// </summary>
        /// <value>Dilution of precision</value>
        [DataMember(Name="dilution_of_precision", EmitDefaultValue=false)]
        public float? DilutionOfPrecision { get; set; }

        /// <summary>
        /// Latitude
        /// </summary>
        /// <value>Latitude</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        /// <value>Longitude</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Number of satellites
        /// </summary>
        /// <value>Number of satellites</value>
        [DataMember(Name="number_of_satellites", EmitDefaultValue=false)]
        public int? NumberOfSatellites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GPSResponseBody {\n");
            sb.Append("  Altitude: ").Append(Altitude).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DilutionOfPrecision: ").Append(DilutionOfPrecision).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  NumberOfSatellites: ").Append(NumberOfSatellites).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GPSResponseBody);
        }

        /// <summary>
        /// Returns true if GPSResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of GPSResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GPSResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Altitude == input.Altitude ||
                    (this.Altitude != null &&
                    this.Altitude.Equals(input.Altitude))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DilutionOfPrecision == input.DilutionOfPrecision ||
                    (this.DilutionOfPrecision != null &&
                    this.DilutionOfPrecision.Equals(input.DilutionOfPrecision))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.NumberOfSatellites == input.NumberOfSatellites ||
                    (this.NumberOfSatellites != null &&
                    this.NumberOfSatellites.Equals(input.NumberOfSatellites))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Altitude != null)
                    hashCode = hashCode * 59 + this.Altitude.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DilutionOfPrecision != null)
                    hashCode = hashCode * 59 + this.DilutionOfPrecision.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.NumberOfSatellites != null)
                    hashCode = hashCode * 59 + this.NumberOfSatellites.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Latitude (decimal?) maximum
            if(this.Latitude > (decimal?)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value less than or equal to 90.", new [] { "Latitude" });
            }

            // Latitude (decimal?) minimum
            if(this.Latitude < (decimal?)-90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value greater than or equal to -90.", new [] { "Latitude" });
            }

            // Longitude (decimal?) maximum
            if(this.Longitude > (decimal?)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value less than or equal to 180.", new [] { "Longitude" });
            }

            // Longitude (decimal?) minimum
            if(this.Longitude < (decimal?)-180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value greater than or equal to -180.", new [] { "Longitude" });
            }

            yield break;
        }
    }

}
