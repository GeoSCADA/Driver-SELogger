/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetSiteByIdResponseBody result type (default view)
    /// </summary>
    [DataContract]
    public partial class SiteGetSiteByIDResponseBody :  IEquatable<SiteGetSiteByIDResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteGetSiteByIDResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SiteGetSiteByIDResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteGetSiteByIDResponseBody" /> class.
        /// </summary>
        /// <param name="accountOrganizationId">Account organization ID.</param>
        /// <param name="creationDate">Creation date (required).</param>
        /// <param name="displayName">Display name (required).</param>
        /// <param name="id">ID is the unique id of the site. (required).</param>
        /// <param name="latitude">Site&#39;s Latitude (required).</param>
        /// <param name="longitude">Site&#39;s Longitude (required).</param>
        /// <param name="status">Status display name (required).</param>
        public SiteGetSiteByIDResponseBody(int? accountOrganizationId = default(int?), DateTime? creationDate = default(DateTime?), string displayName = default(string), long? id = default(long?), string latitude = default(string), string longitude = default(string), string status = default(string))
        {
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new InvalidDataException("creationDate is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.CreationDate = creationDate;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new InvalidDataException("latitude is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.Latitude = latitude;
            }
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new InvalidDataException("longitude is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.Longitude = longitude;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SiteGetSiteByIDResponseBody and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.AccountOrganizationId = accountOrganizationId;
        }
        
        /// <summary>
        /// Account organization ID
        /// </summary>
        /// <value>Account organization ID</value>
        [DataMember(Name="account_organization_id", EmitDefaultValue=false)]
        public int? AccountOrganizationId { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// ID is the unique id of the site.
        /// </summary>
        /// <value>ID is the unique id of the site.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Site&#39;s Latitude
        /// </summary>
        /// <value>Site&#39;s Latitude</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }

        /// <summary>
        /// Site&#39;s Longitude
        /// </summary>
        /// <value>Site&#39;s Longitude</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }

        /// <summary>
        /// Status display name
        /// </summary>
        /// <value>Status display name</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteGetSiteByIDResponseBody {\n");
            sb.Append("  AccountOrganizationId: ").Append(AccountOrganizationId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteGetSiteByIDResponseBody);
        }

        /// <summary>
        /// Returns true if SiteGetSiteByIDResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteGetSiteByIDResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteGetSiteByIDResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountOrganizationId == input.AccountOrganizationId ||
                    (this.AccountOrganizationId != null &&
                    this.AccountOrganizationId.Equals(input.AccountOrganizationId))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountOrganizationId != null)
                    hashCode = hashCode * 59 + this.AccountOrganizationId.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountOrganizationId (int?) minimum
            if(this.AccountOrganizationId < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountOrganizationId, must be a value greater than or equal to 1.", new [] { "AccountOrganizationId" });
            }

            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // Status (string) maxLength
            if(this.Status != null && this.Status.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 64.", new [] { "Status" });
            }

            yield break;
        }
    }

}
