/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetStreamByIdResponseBody result type (default view)
    /// </summary>
    [DataContract]
    public partial class StreamGetStreamByIDResponseBody :  IEquatable<StreamGetStreamByIDResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamGetStreamByIDResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamGetStreamByIDResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamGetStreamByIDResponseBody" /> class.
        /// </summary>
        /// <param name="creationDate">Creation date (required).</param>
        /// <param name="displayName">Display name (required).</param>
        /// <param name="id">ID is the unique id of the stream. (required).</param>
        /// <param name="siteId">Site ID (required).</param>
        /// <param name="statusId">Status ID (required).</param>
        /// <param name="typeDisplayName">Type display name (required).</param>
        /// <param name="typeId">Type ID (required).</param>
        /// <param name="units">Units (required).</param>
        /// <param name="valueScale">Value scale (required).</param>
        public StreamGetStreamByIDResponseBody(DateTime? creationDate = default(DateTime?), string displayName = default(string), long? id = default(long?), int? siteId = default(int?), int? statusId = default(int?), string typeDisplayName = default(string), int? typeId = default(int?), string units = default(string), string valueScale = default(string))
        {
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new InvalidDataException("creationDate is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.CreationDate = creationDate;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "siteId" is required (not null)
            if (siteId == null)
            {
                throw new InvalidDataException("siteId is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.SiteId = siteId;
            }
            // to ensure "statusId" is required (not null)
            if (statusId == null)
            {
                throw new InvalidDataException("statusId is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.StatusId = statusId;
            }
            // to ensure "typeDisplayName" is required (not null)
            if (typeDisplayName == null)
            {
                throw new InvalidDataException("typeDisplayName is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.TypeDisplayName = typeDisplayName;
            }
            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new InvalidDataException("units is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.Units = units;
            }
            // to ensure "valueScale" is required (not null)
            if (valueScale == null)
            {
                throw new InvalidDataException("valueScale is a required property for StreamGetStreamByIDResponseBody and cannot be null");
            }
            else
            {
                this.ValueScale = valueScale;
            }
        }
        
        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// ID is the unique id of the stream.
        /// </summary>
        /// <value>ID is the unique id of the stream.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Site ID
        /// </summary>
        /// <value>Site ID</value>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public int? SiteId { get; set; }

        /// <summary>
        /// Status ID
        /// </summary>
        /// <value>Status ID</value>
        [DataMember(Name="status_id", EmitDefaultValue=false)]
        public int? StatusId { get; set; }

        /// <summary>
        /// Type display name
        /// </summary>
        /// <value>Type display name</value>
        [DataMember(Name="type_display_name", EmitDefaultValue=false)]
        public string TypeDisplayName { get; set; }

        /// <summary>
        /// Type ID
        /// </summary>
        /// <value>Type ID</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public string Units { get; set; }

        /// <summary>
        /// Value scale
        /// </summary>
        /// <value>Value scale</value>
        [DataMember(Name="value_scale", EmitDefaultValue=false)]
        public string ValueScale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamGetStreamByIDResponseBody {\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  TypeDisplayName: ").Append(TypeDisplayName).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  ValueScale: ").Append(ValueScale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamGetStreamByIDResponseBody);
        }

        /// <summary>
        /// Returns true if StreamGetStreamByIDResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamGetStreamByIDResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamGetStreamByIDResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.TypeDisplayName == input.TypeDisplayName ||
                    (this.TypeDisplayName != null &&
                    this.TypeDisplayName.Equals(input.TypeDisplayName))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.ValueScale == input.ValueScale ||
                    (this.ValueScale != null &&
                    this.ValueScale.Equals(input.ValueScale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.TypeDisplayName != null)
                    hashCode = hashCode * 59 + this.TypeDisplayName.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.ValueScale != null)
                    hashCode = hashCode * 59 + this.ValueScale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // SiteId (int?) minimum
            if(this.SiteId < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiteId, must be a value greater than or equal to 1.", new [] { "SiteId" });
            }

            // StatusId (int?) minimum
            if(this.StatusId < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatusId, must be a value greater than or equal to 1.", new [] { "StatusId" });
            }

            // TypeDisplayName (string) maxLength
            if(this.TypeDisplayName != null && this.TypeDisplayName.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeDisplayName, length must be less than 32.", new [] { "TypeDisplayName" });
            }

            // TypeId (int?) minimum
            if(this.TypeId < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeId, must be a value greater than or equal to 1.", new [] { "TypeId" });
            }

            // Units (string) maxLength
            if(this.Units != null && this.Units.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Units, length must be less than 32.", new [] { "Units" });
            }

            yield break;
        }
    }

}
