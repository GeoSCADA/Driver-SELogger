/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ThresholdActionNotificationResponseBody
    /// </summary>
    [DataContract]
    public partial class ThresholdActionNotificationResponseBody :  IEquatable<ThresholdActionNotificationResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Type of notification action
        /// </summary>
        /// <value>Type of notification action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Mail for value: mail
            /// </summary>
            [EnumMember(Value = "mail")]
            Mail = 1,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 2,
            
            /// <summary>
            /// Enum TicketSystem for value: ticketSystem
            /// </summary>
            [EnumMember(Value = "ticketSystem")]
            TicketSystem = 3,
            
            /// <summary>
            /// Enum Voice for value: voice
            /// </summary>
            [EnumMember(Value = "voice")]
            Voice = 4
        }

        /// <summary>
        /// Type of notification action
        /// </summary>
        /// <value>Type of notification action</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionNotificationResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThresholdActionNotificationResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionNotificationResponseBody" /> class.
        /// </summary>
        /// <param name="numRepeatsAllOnFailed">Defines how many times voice notification would be repeated on entire group of users (required).</param>
        /// <param name="relevanceThreshold">Whats that for..? (required).</param>
        /// <param name="repeatsPerUserOnFailed">Defines how many times voice notification would be repeated before trying the another user (in pre defined userGroup) (required).</param>
        /// <param name="type">Type of notification action (required).</param>
        /// <param name="userGroupId">Group Id that user is belonged to, this value should be of existed group and only the group that you have a permission access to (required).</param>
        public ThresholdActionNotificationResponseBody(int? numRepeatsAllOnFailed = default(int?), long? relevanceThreshold = default(long?), int? repeatsPerUserOnFailed = default(int?), TypeEnum type = default(TypeEnum), int? userGroupId = default(int?))
        {
            // to ensure "numRepeatsAllOnFailed" is required (not null)
            if (numRepeatsAllOnFailed == null)
            {
                throw new InvalidDataException("numRepeatsAllOnFailed is a required property for ThresholdActionNotificationResponseBody and cannot be null");
            }
            else
            {
                this.NumRepeatsAllOnFailed = numRepeatsAllOnFailed;
            }
            // to ensure "relevanceThreshold" is required (not null)
            if (relevanceThreshold == null)
            {
                throw new InvalidDataException("relevanceThreshold is a required property for ThresholdActionNotificationResponseBody and cannot be null");
            }
            else
            {
                this.RelevanceThreshold = relevanceThreshold;
            }
            // to ensure "repeatsPerUserOnFailed" is required (not null)
            if (repeatsPerUserOnFailed == null)
            {
                throw new InvalidDataException("repeatsPerUserOnFailed is a required property for ThresholdActionNotificationResponseBody and cannot be null");
            }
            else
            {
                this.RepeatsPerUserOnFailed = repeatsPerUserOnFailed;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ThresholdActionNotificationResponseBody and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "userGroupId" is required (not null)
            if (userGroupId == null)
            {
                throw new InvalidDataException("userGroupId is a required property for ThresholdActionNotificationResponseBody and cannot be null");
            }
            else
            {
                this.UserGroupId = userGroupId;
            }
        }
        
        /// <summary>
        /// Defines how many times voice notification would be repeated on entire group of users
        /// </summary>
        /// <value>Defines how many times voice notification would be repeated on entire group of users</value>
        [DataMember(Name="num_repeats_all_on_failed", EmitDefaultValue=false)]
        public int? NumRepeatsAllOnFailed { get; set; }

        /// <summary>
        /// Whats that for..?
        /// </summary>
        /// <value>Whats that for..?</value>
        [DataMember(Name="relevance_threshold", EmitDefaultValue=false)]
        public long? RelevanceThreshold { get; set; }

        /// <summary>
        /// Defines how many times voice notification would be repeated before trying the another user (in pre defined userGroup)
        /// </summary>
        /// <value>Defines how many times voice notification would be repeated before trying the another user (in pre defined userGroup)</value>
        [DataMember(Name="repeats_per_user_on_failed", EmitDefaultValue=false)]
        public int? RepeatsPerUserOnFailed { get; set; }


        /// <summary>
        /// Group Id that user is belonged to, this value should be of existed group and only the group that you have a permission access to
        /// </summary>
        /// <value>Group Id that user is belonged to, this value should be of existed group and only the group that you have a permission access to</value>
        [DataMember(Name="user_group_id", EmitDefaultValue=false)]
        public int? UserGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThresholdActionNotificationResponseBody {\n");
            sb.Append("  NumRepeatsAllOnFailed: ").Append(NumRepeatsAllOnFailed).Append("\n");
            sb.Append("  RelevanceThreshold: ").Append(RelevanceThreshold).Append("\n");
            sb.Append("  RepeatsPerUserOnFailed: ").Append(RepeatsPerUserOnFailed).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserGroupId: ").Append(UserGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThresholdActionNotificationResponseBody);
        }

        /// <summary>
        /// Returns true if ThresholdActionNotificationResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ThresholdActionNotificationResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThresholdActionNotificationResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumRepeatsAllOnFailed == input.NumRepeatsAllOnFailed ||
                    (this.NumRepeatsAllOnFailed != null &&
                    this.NumRepeatsAllOnFailed.Equals(input.NumRepeatsAllOnFailed))
                ) && 
                (
                    this.RelevanceThreshold == input.RelevanceThreshold ||
                    (this.RelevanceThreshold != null &&
                    this.RelevanceThreshold.Equals(input.RelevanceThreshold))
                ) && 
                (
                    this.RepeatsPerUserOnFailed == input.RepeatsPerUserOnFailed ||
                    (this.RepeatsPerUserOnFailed != null &&
                    this.RepeatsPerUserOnFailed.Equals(input.RepeatsPerUserOnFailed))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserGroupId == input.UserGroupId ||
                    (this.UserGroupId != null &&
                    this.UserGroupId.Equals(input.UserGroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumRepeatsAllOnFailed != null)
                    hashCode = hashCode * 59 + this.NumRepeatsAllOnFailed.GetHashCode();
                if (this.RelevanceThreshold != null)
                    hashCode = hashCode * 59 + this.RelevanceThreshold.GetHashCode();
                if (this.RepeatsPerUserOnFailed != null)
                    hashCode = hashCode * 59 + this.RepeatsPerUserOnFailed.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserGroupId != null)
                    hashCode = hashCode * 59 + this.UserGroupId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumRepeatsAllOnFailed (int?) minimum
            if(this.NumRepeatsAllOnFailed < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumRepeatsAllOnFailed, must be a value greater than or equal to 0.", new [] { "NumRepeatsAllOnFailed" });
            }

            // RepeatsPerUserOnFailed (int?) minimum
            if(this.RepeatsPerUserOnFailed < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepeatsPerUserOnFailed, must be a value greater than or equal to 0.", new [] { "RepeatsPerUserOnFailed" });
            }

            // UserGroupId (int?) minimum
            if(this.UserGroupId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserGroupId, must be a value greater than or equal to 0.", new [] { "UserGroupId" });
            }

            yield break;
        }
    }

}
