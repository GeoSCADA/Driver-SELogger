/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ThresholdActionOutputRequestBody
    /// </summary>
    [DataContract]
    public partial class ThresholdActionOutputRequestBody :  IEquatable<ThresholdActionOutputRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Type of output action
        /// </summary>
        /// <value>Type of output action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Pulseonce for value: pulse_once
            /// </summary>
            [EnumMember(Value = "pulse_once")]
            Pulseonce = 1,
            
            /// <summary>
            /// Enum Setdown for value: set_down
            /// </summary>
            [EnumMember(Value = "set_down")]
            Setdown = 2,
            
            /// <summary>
            /// Enum Setup for value: set_up
            /// </summary>
            [EnumMember(Value = "set_up")]
            Setup = 3
        }

        /// <summary>
        /// Type of output action
        /// </summary>
        /// <value>Type of output action</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionOutputRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThresholdActionOutputRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionOutputRequestBody" /> class.
        /// </summary>
        /// <param name="channelNum">Number of the channel in the wavelet configurations (required).</param>
        /// <param name="type">Type of output action (required).</param>
        public ThresholdActionOutputRequestBody(int? channelNum = default(int?), TypeEnum type = default(TypeEnum))
        {
            // to ensure "channelNum" is required (not null)
            if (channelNum == null)
            {
                throw new InvalidDataException("channelNum is a required property for ThresholdActionOutputRequestBody and cannot be null");
            }
            else
            {
                this.ChannelNum = channelNum;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ThresholdActionOutputRequestBody and cannot be null");
            }
            else
            {
                this.Type = type;
            }
        }
        
        /// <summary>
        /// Number of the channel in the wavelet configurations
        /// </summary>
        /// <value>Number of the channel in the wavelet configurations</value>
        [DataMember(Name="channel_num", EmitDefaultValue=false)]
        public int? ChannelNum { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThresholdActionOutputRequestBody {\n");
            sb.Append("  ChannelNum: ").Append(ChannelNum).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThresholdActionOutputRequestBody);
        }

        /// <summary>
        /// Returns true if ThresholdActionOutputRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ThresholdActionOutputRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThresholdActionOutputRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelNum == input.ChannelNum ||
                    (this.ChannelNum != null &&
                    this.ChannelNum.Equals(input.ChannelNum))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelNum != null)
                    hashCode = hashCode * 59 + this.ChannelNum.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelNum (int?) maximum
            if(this.ChannelNum > (int?)15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelNum, must be a value less than or equal to 15.", new [] { "ChannelNum" });
            }

            // ChannelNum (int?) minimum
            if(this.ChannelNum < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelNum, must be a value greater than or equal to 0.", new [] { "ChannelNum" });
            }

            yield break;
        }
    }

}
