/* 
 * RESTAPI Service
 *
 * RESTful API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ThresholdActionSampleResponseBody
    /// </summary>
    [DataContract]
    public partial class ThresholdActionSampleResponseBody :  IEquatable<ThresholdActionSampleResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Type of sample action on a group of streams
        /// </summary>
        /// <value>Type of sample action on a group of streams</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Pause for value: pause
            /// </summary>
            [EnumMember(Value = "pause")]
            Pause = 1,
            
            /// <summary>
            /// Enum Resume for value: resume
            /// </summary>
            [EnumMember(Value = "resume")]
            Resume = 2,
            
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 3,
            
            /// <summary>
            /// Enum Pausesingle for value: pause_single
            /// </summary>
            [EnumMember(Value = "pause_single")]
            Pausesingle = 4
        }

        /// <summary>
        /// Type of sample action on a group of streams
        /// </summary>
        /// <value>Type of sample action on a group of streams</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionSampleResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThresholdActionSampleResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdActionSampleResponseBody" /> class.
        /// </summary>
        /// <param name="sampleGroupId">SampleGroupID is the id of the group that channel is belong to (maximum 2 groups). On this group sample settings of a Wavelet would be applied. This id must be of an existing sample group. In order to set up the stream_id field SampleGroupID field must be omitted.</param>
        /// <param name="streamId">StreamId is the unique id of the stream to make an action on (required).</param>
        /// <param name="type">Type of sample action on a group of streams (required).</param>
        public ThresholdActionSampleResponseBody(int? sampleGroupId = default(int?), int? streamId = default(int?), TypeEnum type = default(TypeEnum))
        {
            // to ensure "streamId" is required (not null)
            if (streamId == null)
            {
                throw new InvalidDataException("streamId is a required property for ThresholdActionSampleResponseBody and cannot be null");
            }
            else
            {
                this.StreamId = streamId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ThresholdActionSampleResponseBody and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.SampleGroupId = sampleGroupId;
        }
        
        /// <summary>
        /// SampleGroupID is the id of the group that channel is belong to (maximum 2 groups). On this group sample settings of a Wavelet would be applied. This id must be of an existing sample group. In order to set up the stream_id field SampleGroupID field must be omitted
        /// </summary>
        /// <value>SampleGroupID is the id of the group that channel is belong to (maximum 2 groups). On this group sample settings of a Wavelet would be applied. This id must be of an existing sample group. In order to set up the stream_id field SampleGroupID field must be omitted</value>
        [DataMember(Name="sample_group_id", EmitDefaultValue=false)]
        public int? SampleGroupId { get; set; }

        /// <summary>
        /// StreamId is the unique id of the stream to make an action on
        /// </summary>
        /// <value>StreamId is the unique id of the stream to make an action on</value>
        [DataMember(Name="stream_id", EmitDefaultValue=false)]
        public int? StreamId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThresholdActionSampleResponseBody {\n");
            sb.Append("  SampleGroupId: ").Append(SampleGroupId).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThresholdActionSampleResponseBody);
        }

        /// <summary>
        /// Returns true if ThresholdActionSampleResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ThresholdActionSampleResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThresholdActionSampleResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SampleGroupId == input.SampleGroupId ||
                    (this.SampleGroupId != null &&
                    this.SampleGroupId.Equals(input.SampleGroupId))
                ) && 
                (
                    this.StreamId == input.StreamId ||
                    (this.StreamId != null &&
                    this.StreamId.Equals(input.StreamId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SampleGroupId != null)
                    hashCode = hashCode * 59 + this.SampleGroupId.GetHashCode();
                if (this.StreamId != null)
                    hashCode = hashCode * 59 + this.StreamId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SampleGroupId (int?) minimum
            if(this.SampleGroupId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SampleGroupId, must be a value greater than or equal to 0.", new [] { "SampleGroupId" });
            }

            // StreamId (int?) minimum
            if(this.StreamId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreamId, must be a value greater than or equal to 0.", new [] { "StreamId" });
            }

            yield break;
        }
    }

}
